Terminals unused in grammar

   ID
   LITERAL
   FOR
   DELIMITER
   TAB


State 0 conflicts: 1 reduce/reduce
State 14 conflicts: 1 shift/reduce
State 45 conflicts: 1 reduce/reduce
State 48 conflicts: 2 shift/reduce, 2 reduce/reduce
State 94 conflicts: 1 shift/reduce, 4 reduce/reduce
State 96 conflicts: 23 shift/reduce
State 99 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce, 4 reduce/reduce
State 106 conflicts: 1 shift/reduce, 3 reduce/reduce
State 107 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce, 2 reduce/reduce
State 110 conflicts: 1 shift/reduce, 5 reduce/reduce
State 111 conflicts: 1 shift/reduce, 4 reduce/reduce


Grammar

    0 $accept: G $end

    1 G: P

    2 P: S
    3  | S NL P
    4  | LIST
    5  | TUPLE
    6  | SET
    7  | /* empty */

    8 S: if_statement else_elif
    9  | while_statement else_statement
   10  | id assign E
   11  | E
   12  | /* empty */

   13 if_statement: IF B COLON NL indent_statement

   14 else_elif: elif_statement else_statement

   15 else_statement: ELSE COLON NL indent_statement
   16               | /* empty */

   17 elif_statement: ELIF B COLON NL indent_statement
   18               | elif_statement elif_statement
   19               | /* empty */

   20 while_statement: WHILE B COLON NL indent_statement

   21 indent_statement: SPACE S NL
   22                 | indent_statement indent_statement
   23                 | /* empty */

   24 B: B OR B
   25  | B AND B
   26  | NOT B
   27  | E
   28  | TRUE
   29  | FALSE

   30 E: E oper E
   31  | "(" E ")"
   32  | MINUS E
   33  | id
   34  | INT
   35  | FLOAT

   36 LIST: LISTO ECOM LISTC

   37 TUPLE: TUPLEO ECOM TUPLEC

   38 SET: SETO ECOM SETC

   39 ECOM: E COMMA ECOM
   40     | E
   41     | /* empty */

   42 oper: arith
   43     | relop
   44     | identity
   45     | membership
   46     | bitwise

   47 arith: PLUS
   48      | MINUS
   49      | MUL
   50      | DIV
   51      | FDIV
   52      | EXP
   53      | MOD

   54 relop: LT
   55      | LTE
   56      | GT
   57      | GTE
   58      | NE
   59      | DEQ

   60 assign: EQ
   61       | AEQ
   62       | SEQ
   63       | MEQ
   64       | DIEQ
   65       | FDEQ
   66       | EEQ
   67       | MOEQ
   68       | BLEQ
   69       | BREQ

   70 identity: IS
   71         | ISN

   72 membership: IN
   73           | NIN

   74 bitwise: BAND
   75        | BOR
   76        | BXOR
   77        | BNOT
   78        | LSHIFT
   79        | RSHIFT


Terminals, with rules where they appear

$end (0) 0
error (256)
id (258) 10 33
ID (259)
LITERAL (260)
FLOAT (261) 35
INT (262) 34
AND (263) 25
OR (264) 24
NOT (265) 26
PLUS (266) 47
MINUS (267) 32 48
MUL (268) 49
DIV (269) 50
MOD (270) 53
EXP (271) 52
FDIV (272) 51
LT (273) 54
GT (274) 56
LTE (275) 55
GTE (276) 57
DEQ (277) 59
NE (278) 58
EQ (279) 60
AEQ (280) 61
SEQ (281) 62
MEQ (282) 63
DIEQ (283) 64
FDEQ (284) 65
EEQ (285) 66
MOEQ (286) 67
BLEQ (287) 68
BREQ (288) 69
IS (289) 70
ISN (290) 71
IN (291) 72
NIN (292) 73
LSHIFT (293) 78
RSHIFT (294) 79
BAND (295) 74
BOR (296) 75
BXOR (297) 76
BNOT (298) 77
IF (299) 13
ELSE (300) 15
ELIF (301) 17
WHILE (302) 20
FOR (303)
TRUE (304) 28
FALSE (305) 29
DELIMITER (306)
COLON (307) 13 15 17 20
TAB (308)
NL (309) 3 13 15 17 20 21
SPACE (310) 21
COMMA (311) 39
LISTO (312) 36
LISTC (313) 36
TUPLEO (314) 37
TUPLEC (315) 37
SETO (316) 38
SETC (317) 38
"(" (318) 31
")" (319) 31


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
G (66)
    on left: 1, on right: 0
P (67)
    on left: 2 3 4 5 6 7, on right: 1 3
S (68)
    on left: 8 9 10 11 12, on right: 2 3 21
if_statement (69)
    on left: 13, on right: 8
else_elif (70)
    on left: 14, on right: 8
else_statement (71)
    on left: 15 16, on right: 9 14
elif_statement (72)
    on left: 17 18 19, on right: 14 18
while_statement (73)
    on left: 20, on right: 9
indent_statement (74)
    on left: 21 22 23, on right: 13 15 17 20 22
B (75)
    on left: 24 25 26 27 28 29, on right: 13 17 20 24 25 26
E (76)
    on left: 30 31 32 33 34 35, on right: 10 11 27 30 31 32 39 40
LIST (77)
    on left: 36, on right: 4
TUPLE (78)
    on left: 37, on right: 5
SET (79)
    on left: 38, on right: 6
ECOM (80)
    on left: 39 40 41, on right: 36 37 38 39
oper (81)
    on left: 42 43 44 45 46, on right: 30
arith (82)
    on left: 47 48 49 50 51 52 53, on right: 42
relop (83)
    on left: 54 55 56 57 58 59, on right: 43
assign (84)
    on left: 60 61 62 63 64 65 66 67 68 69, on right: 10
identity (85)
    on left: 70 71, on right: 44
membership (86)
    on left: 72 73, on right: 45
bitwise (87)
    on left: 74 75 76 77 78 79, on right: 46


state 0

    0 $accept: . G $end

    id      shift, and go to state 1
    FLOAT   shift, and go to state 2
    INT     shift, and go to state 3
    MINUS   shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    LISTO   shift, and go to state 7
    TUPLEO  shift, and go to state 8
    SETO    shift, and go to state 9
    "("     shift, and go to state 10

    $end      reduce using rule 7 (P)
    $end      [reduce using rule 12 (S)]
    NL        reduce using rule 12 (S)
    $default  reduce using rule 7 (P)

    G                go to state 11
    P                go to state 12
    S                go to state 13
    if_statement     go to state 14
    while_statement  go to state 15
    E                go to state 16
    LIST             go to state 17
    TUPLE            go to state 18
    SET              go to state 19


state 1

   10 S: id . assign E
   33 E: id .

    EQ    shift, and go to state 20
    AEQ   shift, and go to state 21
    SEQ   shift, and go to state 22
    MEQ   shift, and go to state 23
    DIEQ  shift, and go to state 24
    FDEQ  shift, and go to state 25
    EEQ   shift, and go to state 26
    MOEQ  shift, and go to state 27
    BLEQ  shift, and go to state 28
    BREQ  shift, and go to state 29

    $default  reduce using rule 33 (E)

    assign  go to state 30


state 2

   35 E: FLOAT .

    $default  reduce using rule 35 (E)


state 3

   34 E: INT .

    $default  reduce using rule 34 (E)


state 4

   32 E: MINUS . E

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    E  go to state 32


state 5

   13 if_statement: IF . B COLON NL indent_statement

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 33
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 34
    FALSE  shift, and go to state 35
    "("    shift, and go to state 10

    B  go to state 36
    E  go to state 37


state 6

   20 while_statement: WHILE . B COLON NL indent_statement

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 33
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 34
    FALSE  shift, and go to state 35
    "("    shift, and go to state 10

    B  go to state 38
    E  go to state 37


state 7

   36 LIST: LISTO . ECOM LISTC

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    $default  reduce using rule 41 (ECOM)

    E     go to state 39
    ECOM  go to state 40


state 8

   37 TUPLE: TUPLEO . ECOM TUPLEC

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    $default  reduce using rule 41 (ECOM)

    E     go to state 39
    ECOM  go to state 41


state 9

   38 SET: SETO . ECOM SETC

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    $default  reduce using rule 41 (ECOM)

    E     go to state 39
    ECOM  go to state 42


state 10

   31 E: "(" . E ")"

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    E  go to state 43


state 11

    0 $accept: G . $end

    $end  shift, and go to state 44


state 12

    1 G: P .

    $default  reduce using rule 1 (G)


state 13

    2 P: S .
    3  | S . NL P

    NL  shift, and go to state 45

    $default  reduce using rule 2 (P)


state 14

    8 S: if_statement . else_elif

    ELIF  shift, and go to state 46

    ELIF      [reduce using rule 19 (elif_statement)]
    $default  reduce using rule 19 (elif_statement)

    else_elif       go to state 47
    elif_statement  go to state 48


state 15

    9 S: while_statement . else_statement

    ELSE  shift, and go to state 49

    $default  reduce using rule 16 (else_statement)

    else_statement  go to state 50


state 16

   11 S: E .
   30 E: E . oper E

    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    MUL     shift, and go to state 53
    DIV     shift, and go to state 54
    MOD     shift, and go to state 55
    EXP     shift, and go to state 56
    FDIV    shift, and go to state 57
    LT      shift, and go to state 58
    GT      shift, and go to state 59
    LTE     shift, and go to state 60
    GTE     shift, and go to state 61
    DEQ     shift, and go to state 62
    NE      shift, and go to state 63
    IS      shift, and go to state 64
    ISN     shift, and go to state 65
    IN      shift, and go to state 66
    NIN     shift, and go to state 67
    LSHIFT  shift, and go to state 68
    RSHIFT  shift, and go to state 69
    BAND    shift, and go to state 70
    BOR     shift, and go to state 71
    BXOR    shift, and go to state 72
    BNOT    shift, and go to state 73

    $default  reduce using rule 11 (S)

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 17

    4 P: LIST .

    $default  reduce using rule 4 (P)


state 18

    5 P: TUPLE .

    $default  reduce using rule 5 (P)


state 19

    6 P: SET .

    $default  reduce using rule 6 (P)


state 20

   60 assign: EQ .

    $default  reduce using rule 60 (assign)


state 21

   61 assign: AEQ .

    $default  reduce using rule 61 (assign)


state 22

   62 assign: SEQ .

    $default  reduce using rule 62 (assign)


state 23

   63 assign: MEQ .

    $default  reduce using rule 63 (assign)


state 24

   64 assign: DIEQ .

    $default  reduce using rule 64 (assign)


state 25

   65 assign: FDEQ .

    $default  reduce using rule 65 (assign)


state 26

   66 assign: EEQ .

    $default  reduce using rule 66 (assign)


state 27

   67 assign: MOEQ .

    $default  reduce using rule 67 (assign)


state 28

   68 assign: BLEQ .

    $default  reduce using rule 68 (assign)


state 29

   69 assign: BREQ .

    $default  reduce using rule 69 (assign)


state 30

   10 S: id assign . E

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    E  go to state 80


state 31

   33 E: id .

    $default  reduce using rule 33 (E)


state 32

   30 E: E . oper E
   32  | MINUS E .

    MUL   shift, and go to state 53
    DIV   shift, and go to state 54
    MOD   shift, and go to state 55
    EXP   shift, and go to state 56
    FDIV  shift, and go to state 57
    BNOT  shift, and go to state 73

    $default  reduce using rule 32 (E)

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 33

   26 B: NOT . B

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 33
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 34
    FALSE  shift, and go to state 35
    "("    shift, and go to state 10

    B  go to state 81
    E  go to state 37


state 34

   28 B: TRUE .

    $default  reduce using rule 28 (B)


state 35

   29 B: FALSE .

    $default  reduce using rule 29 (B)


state 36

   13 if_statement: IF B . COLON NL indent_statement
   24 B: B . OR B
   25  | B . AND B

    AND    shift, and go to state 82
    OR     shift, and go to state 83
    COLON  shift, and go to state 84


state 37

   27 B: E .
   30 E: E . oper E

    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    MUL     shift, and go to state 53
    DIV     shift, and go to state 54
    MOD     shift, and go to state 55
    EXP     shift, and go to state 56
    FDIV    shift, and go to state 57
    LT      shift, and go to state 58
    GT      shift, and go to state 59
    LTE     shift, and go to state 60
    GTE     shift, and go to state 61
    DEQ     shift, and go to state 62
    NE      shift, and go to state 63
    IS      shift, and go to state 64
    ISN     shift, and go to state 65
    IN      shift, and go to state 66
    NIN     shift, and go to state 67
    LSHIFT  shift, and go to state 68
    RSHIFT  shift, and go to state 69
    BAND    shift, and go to state 70
    BOR     shift, and go to state 71
    BXOR    shift, and go to state 72
    BNOT    shift, and go to state 73

    $default  reduce using rule 27 (B)

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 38

   20 while_statement: WHILE B . COLON NL indent_statement
   24 B: B . OR B
   25  | B . AND B

    AND    shift, and go to state 82
    OR     shift, and go to state 83
    COLON  shift, and go to state 85


state 39

   30 E: E . oper E
   39 ECOM: E . COMMA ECOM
   40     | E .

    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    MUL     shift, and go to state 53
    DIV     shift, and go to state 54
    MOD     shift, and go to state 55
    EXP     shift, and go to state 56
    FDIV    shift, and go to state 57
    LT      shift, and go to state 58
    GT      shift, and go to state 59
    LTE     shift, and go to state 60
    GTE     shift, and go to state 61
    DEQ     shift, and go to state 62
    NE      shift, and go to state 63
    IS      shift, and go to state 64
    ISN     shift, and go to state 65
    IN      shift, and go to state 66
    NIN     shift, and go to state 67
    LSHIFT  shift, and go to state 68
    RSHIFT  shift, and go to state 69
    BAND    shift, and go to state 70
    BOR     shift, and go to state 71
    BXOR    shift, and go to state 72
    BNOT    shift, and go to state 73
    COMMA   shift, and go to state 86

    $default  reduce using rule 40 (ECOM)

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 40

   36 LIST: LISTO ECOM . LISTC

    LISTC  shift, and go to state 87


state 41

   37 TUPLE: TUPLEO ECOM . TUPLEC

    TUPLEC  shift, and go to state 88


state 42

   38 SET: SETO ECOM . SETC

    SETC  shift, and go to state 89


state 43

   30 E: E . oper E
   31  | "(" E . ")"

    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    MUL     shift, and go to state 53
    DIV     shift, and go to state 54
    MOD     shift, and go to state 55
    EXP     shift, and go to state 56
    FDIV    shift, and go to state 57
    LT      shift, and go to state 58
    GT      shift, and go to state 59
    LTE     shift, and go to state 60
    GTE     shift, and go to state 61
    DEQ     shift, and go to state 62
    NE      shift, and go to state 63
    IS      shift, and go to state 64
    ISN     shift, and go to state 65
    IN      shift, and go to state 66
    NIN     shift, and go to state 67
    LSHIFT  shift, and go to state 68
    RSHIFT  shift, and go to state 69
    BAND    shift, and go to state 70
    BOR     shift, and go to state 71
    BXOR    shift, and go to state 72
    BNOT    shift, and go to state 73
    ")"     shift, and go to state 90

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 44

    0 $accept: G $end .

    $default  accept


state 45

    3 P: S NL . P

    id      shift, and go to state 1
    FLOAT   shift, and go to state 2
    INT     shift, and go to state 3
    MINUS   shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    LISTO   shift, and go to state 7
    TUPLEO  shift, and go to state 8
    SETO    shift, and go to state 9
    "("     shift, and go to state 10

    $end      reduce using rule 7 (P)
    $end      [reduce using rule 12 (S)]
    NL        reduce using rule 12 (S)
    $default  reduce using rule 7 (P)

    P                go to state 91
    S                go to state 13
    if_statement     go to state 14
    while_statement  go to state 15
    E                go to state 16
    LIST             go to state 17
    TUPLE            go to state 18
    SET              go to state 19


state 46

   17 elif_statement: ELIF . B COLON NL indent_statement

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 33
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 34
    FALSE  shift, and go to state 35
    "("    shift, and go to state 10

    B  go to state 92
    E  go to state 37


state 47

    8 S: if_statement else_elif .

    $default  reduce using rule 8 (S)


state 48

   14 else_elif: elif_statement . else_statement
   18 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 49
    ELIF  shift, and go to state 46

    $end      reduce using rule 16 (else_statement)
    $end      [reduce using rule 19 (elif_statement)]
    ELSE      [reduce using rule 19 (elif_statement)]
    ELIF      [reduce using rule 19 (elif_statement)]
    NL        reduce using rule 16 (else_statement)
    NL        [reduce using rule 19 (elif_statement)]
    $default  reduce using rule 16 (else_statement)

    else_statement  go to state 93
    elif_statement  go to state 94


state 49

   15 else_statement: ELSE . COLON NL indent_statement

    COLON  shift, and go to state 95


state 50

    9 S: while_statement else_statement .

    $default  reduce using rule 9 (S)


state 51

   47 arith: PLUS .

    $default  reduce using rule 47 (arith)


state 52

   48 arith: MINUS .

    $default  reduce using rule 48 (arith)


state 53

   49 arith: MUL .

    $default  reduce using rule 49 (arith)


state 54

   50 arith: DIV .

    $default  reduce using rule 50 (arith)


state 55

   53 arith: MOD .

    $default  reduce using rule 53 (arith)


state 56

   52 arith: EXP .

    $default  reduce using rule 52 (arith)


state 57

   51 arith: FDIV .

    $default  reduce using rule 51 (arith)


state 58

   54 relop: LT .

    $default  reduce using rule 54 (relop)


state 59

   56 relop: GT .

    $default  reduce using rule 56 (relop)


state 60

   55 relop: LTE .

    $default  reduce using rule 55 (relop)


state 61

   57 relop: GTE .

    $default  reduce using rule 57 (relop)


state 62

   59 relop: DEQ .

    $default  reduce using rule 59 (relop)


state 63

   58 relop: NE .

    $default  reduce using rule 58 (relop)


state 64

   70 identity: IS .

    $default  reduce using rule 70 (identity)


state 65

   71 identity: ISN .

    $default  reduce using rule 71 (identity)


state 66

   72 membership: IN .

    $default  reduce using rule 72 (membership)


state 67

   73 membership: NIN .

    $default  reduce using rule 73 (membership)


state 68

   78 bitwise: LSHIFT .

    $default  reduce using rule 78 (bitwise)


state 69

   79 bitwise: RSHIFT .

    $default  reduce using rule 79 (bitwise)


state 70

   74 bitwise: BAND .

    $default  reduce using rule 74 (bitwise)


state 71

   75 bitwise: BOR .

    $default  reduce using rule 75 (bitwise)


state 72

   76 bitwise: BXOR .

    $default  reduce using rule 76 (bitwise)


state 73

   77 bitwise: BNOT .

    $default  reduce using rule 77 (bitwise)


state 74

   30 E: E oper . E

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    E  go to state 96


state 75

   42 oper: arith .

    $default  reduce using rule 42 (oper)


state 76

   43 oper: relop .

    $default  reduce using rule 43 (oper)


state 77

   44 oper: identity .

    $default  reduce using rule 44 (oper)


state 78

   45 oper: membership .

    $default  reduce using rule 45 (oper)


state 79

   46 oper: bitwise .

    $default  reduce using rule 46 (oper)


state 80

   10 S: id assign E .
   30 E: E . oper E

    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    MUL     shift, and go to state 53
    DIV     shift, and go to state 54
    MOD     shift, and go to state 55
    EXP     shift, and go to state 56
    FDIV    shift, and go to state 57
    LT      shift, and go to state 58
    GT      shift, and go to state 59
    LTE     shift, and go to state 60
    GTE     shift, and go to state 61
    DEQ     shift, and go to state 62
    NE      shift, and go to state 63
    IS      shift, and go to state 64
    ISN     shift, and go to state 65
    IN      shift, and go to state 66
    NIN     shift, and go to state 67
    LSHIFT  shift, and go to state 68
    RSHIFT  shift, and go to state 69
    BAND    shift, and go to state 70
    BOR     shift, and go to state 71
    BXOR    shift, and go to state 72
    BNOT    shift, and go to state 73

    $default  reduce using rule 10 (S)

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 81

   24 B: B . OR B
   25  | B . AND B
   26  | NOT B .

    $default  reduce using rule 26 (B)


state 82

   25 B: B AND . B

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 33
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 34
    FALSE  shift, and go to state 35
    "("    shift, and go to state 10

    B  go to state 97
    E  go to state 37


state 83

   24 B: B OR . B

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 33
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 34
    FALSE  shift, and go to state 35
    "("    shift, and go to state 10

    B  go to state 98
    E  go to state 37


state 84

   13 if_statement: IF B COLON . NL indent_statement

    NL  shift, and go to state 99


state 85

   20 while_statement: WHILE B COLON . NL indent_statement

    NL  shift, and go to state 100


state 86

   39 ECOM: E COMMA . ECOM

    id     shift, and go to state 31
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 10

    $default  reduce using rule 41 (ECOM)

    E     go to state 39
    ECOM  go to state 101


state 87

   36 LIST: LISTO ECOM LISTC .

    $default  reduce using rule 36 (LIST)


state 88

   37 TUPLE: TUPLEO ECOM TUPLEC .

    $default  reduce using rule 37 (TUPLE)


state 89

   38 SET: SETO ECOM SETC .

    $default  reduce using rule 38 (SET)


state 90

   31 E: "(" E ")" .

    $default  reduce using rule 31 (E)


state 91

    3 P: S NL P .

    $default  reduce using rule 3 (P)


state 92

   17 elif_statement: ELIF B . COLON NL indent_statement
   24 B: B . OR B
   25  | B . AND B

    AND    shift, and go to state 82
    OR     shift, and go to state 83
    COLON  shift, and go to state 102


state 93

   14 else_elif: elif_statement else_statement .

    $default  reduce using rule 14 (else_elif)


state 94

   18 elif_statement: elif_statement . elif_statement
   18               | elif_statement elif_statement .

    ELIF  shift, and go to state 46

    $end      reduce using rule 18 (elif_statement)
    $end      [reduce using rule 19 (elif_statement)]
    ELSE      reduce using rule 18 (elif_statement)
    ELSE      [reduce using rule 19 (elif_statement)]
    ELIF      [reduce using rule 18 (elif_statement)]
    ELIF      [reduce using rule 19 (elif_statement)]
    NL        reduce using rule 18 (elif_statement)
    NL        [reduce using rule 19 (elif_statement)]
    $default  reduce using rule 18 (elif_statement)

    elif_statement  go to state 94


state 95

   15 else_statement: ELSE COLON . NL indent_statement

    NL  shift, and go to state 103


state 96

   30 E: E . oper E
   30  | E oper E .

    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    MUL     shift, and go to state 53
    DIV     shift, and go to state 54
    MOD     shift, and go to state 55
    EXP     shift, and go to state 56
    FDIV    shift, and go to state 57
    LT      shift, and go to state 58
    GT      shift, and go to state 59
    LTE     shift, and go to state 60
    GTE     shift, and go to state 61
    DEQ     shift, and go to state 62
    NE      shift, and go to state 63
    IS      shift, and go to state 64
    ISN     shift, and go to state 65
    IN      shift, and go to state 66
    NIN     shift, and go to state 67
    LSHIFT  shift, and go to state 68
    RSHIFT  shift, and go to state 69
    BAND    shift, and go to state 70
    BOR     shift, and go to state 71
    BXOR    shift, and go to state 72
    BNOT    shift, and go to state 73

    PLUS      [reduce using rule 30 (E)]
    MINUS     [reduce using rule 30 (E)]
    MUL       [reduce using rule 30 (E)]
    DIV       [reduce using rule 30 (E)]
    MOD       [reduce using rule 30 (E)]
    EXP       [reduce using rule 30 (E)]
    FDIV      [reduce using rule 30 (E)]
    LT        [reduce using rule 30 (E)]
    GT        [reduce using rule 30 (E)]
    LTE       [reduce using rule 30 (E)]
    GTE       [reduce using rule 30 (E)]
    DEQ       [reduce using rule 30 (E)]
    NE        [reduce using rule 30 (E)]
    IS        [reduce using rule 30 (E)]
    ISN       [reduce using rule 30 (E)]
    IN        [reduce using rule 30 (E)]
    NIN       [reduce using rule 30 (E)]
    LSHIFT    [reduce using rule 30 (E)]
    RSHIFT    [reduce using rule 30 (E)]
    BAND      [reduce using rule 30 (E)]
    BOR       [reduce using rule 30 (E)]
    BXOR      [reduce using rule 30 (E)]
    BNOT      [reduce using rule 30 (E)]
    $default  reduce using rule 30 (E)

    oper        go to state 74
    arith       go to state 75
    relop       go to state 76
    identity    go to state 77
    membership  go to state 78
    bitwise     go to state 79


state 97

   24 B: B . OR B
   25  | B . AND B
   25  | B AND B .

    $default  reduce using rule 25 (B)


state 98

   24 B: B . OR B
   24  | B OR B .
   25  | B . AND B

    AND  shift, and go to state 82

    $default  reduce using rule 24 (B)


state 99

   13 if_statement: IF B COLON NL . indent_statement

    SPACE  shift, and go to state 104

    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 23 (indent_statement)

    indent_statement  go to state 105


state 100

   20 while_statement: WHILE B COLON NL . indent_statement

    SPACE  shift, and go to state 104

    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 23 (indent_statement)

    indent_statement  go to state 106


state 101

   39 ECOM: E COMMA ECOM .

    $default  reduce using rule 39 (ECOM)


state 102

   17 elif_statement: ELIF B COLON . NL indent_statement

    NL  shift, and go to state 107


state 103

   15 else_statement: ELSE COLON NL . indent_statement

    SPACE  shift, and go to state 104

    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 23 (indent_statement)

    indent_statement  go to state 108


state 104

   21 indent_statement: SPACE . S NL

    id     shift, and go to state 1
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    IF     shift, and go to state 5
    WHILE  shift, and go to state 6
    "("    shift, and go to state 10

    $default  reduce using rule 12 (S)

    S                go to state 109
    if_statement     go to state 14
    while_statement  go to state 15
    E                go to state 16


state 105

   13 if_statement: IF B COLON NL indent_statement .
   22 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 104

    $end      reduce using rule 13 (if_statement)
    $end      [reduce using rule 23 (indent_statement)]
    ELSE      reduce using rule 13 (if_statement)
    ELSE      [reduce using rule 23 (indent_statement)]
    ELIF      reduce using rule 13 (if_statement)
    ELIF      [reduce using rule 23 (indent_statement)]
    NL        reduce using rule 13 (if_statement)
    NL        [reduce using rule 23 (indent_statement)]
    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 13 (if_statement)

    indent_statement  go to state 110


state 106

   20 while_statement: WHILE B COLON NL indent_statement .
   22 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 104

    $end      reduce using rule 20 (while_statement)
    $end      [reduce using rule 23 (indent_statement)]
    ELSE      reduce using rule 20 (while_statement)
    ELSE      [reduce using rule 23 (indent_statement)]
    NL        reduce using rule 20 (while_statement)
    NL        [reduce using rule 23 (indent_statement)]
    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 20 (while_statement)

    indent_statement  go to state 110


state 107

   17 elif_statement: ELIF B COLON NL . indent_statement

    SPACE  shift, and go to state 104

    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 23 (indent_statement)

    indent_statement  go to state 111


state 108

   15 else_statement: ELSE COLON NL indent_statement .
   22 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 104

    $end      reduce using rule 15 (else_statement)
    $end      [reduce using rule 23 (indent_statement)]
    NL        reduce using rule 15 (else_statement)
    NL        [reduce using rule 23 (indent_statement)]
    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 15 (else_statement)

    indent_statement  go to state 110


state 109

   21 indent_statement: SPACE S . NL

    NL  shift, and go to state 112


state 110

   22 indent_statement: indent_statement . indent_statement
   22                 | indent_statement indent_statement .

    SPACE  shift, and go to state 104

    $end      reduce using rule 22 (indent_statement)
    $end      [reduce using rule 23 (indent_statement)]
    ELSE      reduce using rule 22 (indent_statement)
    ELSE      [reduce using rule 23 (indent_statement)]
    ELIF      reduce using rule 22 (indent_statement)
    ELIF      [reduce using rule 23 (indent_statement)]
    NL        reduce using rule 22 (indent_statement)
    NL        [reduce using rule 23 (indent_statement)]
    SPACE     [reduce using rule 22 (indent_statement)]
    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 22 (indent_statement)

    indent_statement  go to state 110


state 111

   17 elif_statement: ELIF B COLON NL indent_statement .
   22 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 104

    $end      reduce using rule 17 (elif_statement)
    $end      [reduce using rule 23 (indent_statement)]
    ELSE      reduce using rule 17 (elif_statement)
    ELSE      [reduce using rule 23 (indent_statement)]
    ELIF      reduce using rule 17 (elif_statement)
    ELIF      [reduce using rule 23 (indent_statement)]
    NL        reduce using rule 17 (elif_statement)
    NL        [reduce using rule 23 (indent_statement)]
    SPACE     [reduce using rule 23 (indent_statement)]
    $default  reduce using rule 17 (elif_statement)

    indent_statement  go to state 110


state 112

   21 indent_statement: SPACE S NL .

    $default  reduce using rule 21 (indent_statement)
