Terminals unused in grammar

   ID
   LITERAL
   FOR
   DELIMITER
   TAB
   LIST
   SET
   TUPLE
   DICT


State 0 conflicts: 1 reduce/reduce
State 11 conflicts: 1 shift/reduce
State 35 conflicts: 1 reduce/reduce
State 38 conflicts: 2 shift/reduce, 2 reduce/reduce
State 80 conflicts: 1 shift/reduce, 4 reduce/reduce
State 82 conflicts: 23 shift/reduce
State 85 conflicts: 1 shift/reduce
State 86 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce, 4 reduce/reduce
State 91 conflicts: 1 shift/reduce, 3 reduce/reduce
State 92 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce, 2 reduce/reduce
State 95 conflicts: 1 shift/reduce, 5 reduce/reduce
State 96 conflicts: 1 shift/reduce, 4 reduce/reduce


Grammar

    0 $accept: G $end

    1 G: P

    2 P: S
    3  | S NL P
    4  | /* empty */

    5 S: if_statement else_elif
    6  | while_statement else_statement
    7  | id assign E
    8  | E
    9  | /* empty */

   10 if_statement: IF B COLON NL indent_statement

   11 else_elif: elif_statement else_statement

   12 else_statement: ELSE COLON NL indent_statement
   13               | /* empty */

   14 elif_statement: ELIF B COLON NL indent_statement
   15               | elif_statement elif_statement
   16               | /* empty */

   17 while_statement: WHILE B COLON NL indent_statement

   18 indent_statement: SPACE S NL
   19                 | indent_statement indent_statement
   20                 | /* empty */

   21 B: B OR B
   22  | B AND B
   23  | NOT B
   24  | E
   25  | TRUE
   26  | FALSE

   27 E: E oper E
   28  | "(" E ")"
   29  | MINUS E
   30  | id
   31  | INT
   32  | FLOAT

   33 oper: arith
   34     | relop
   35     | identity
   36     | membership
   37     | bitwise

   38 arith: PLUS
   39      | MINUS
   40      | MUL
   41      | DIV
   42      | FDIV
   43      | EXP
   44      | MOD

   45 relop: LT
   46      | LTE
   47      | GT
   48      | GTE
   49      | NE
   50      | DEQ

   51 assign: EQ
   52       | AEQ
   53       | SEQ
   54       | MEQ
   55       | DIEQ
   56       | FDEQ
   57       | EEQ
   58       | MOEQ
   59       | BLEQ
   60       | BREQ

   61 identity: IS
   62         | ISN

   63 membership: IN
   64           | NIN

   65 bitwise: BAND
   66        | BOR
   67        | BXOR
   68        | BNOT
   69        | LSHIFT
   70        | RSHIFT


Terminals, with rules where they appear

$end (0) 0
error (256)
id (258) 7 30
ID (259)
LITERAL (260)
FLOAT (261) 32
INT (262) 31
AND (263) 22
OR (264) 21
NOT (265) 23
PLUS (266) 38
MINUS (267) 29 39
MUL (268) 40
DIV (269) 41
MOD (270) 44
EXP (271) 43
FDIV (272) 42
LT (273) 45
GT (274) 47
LTE (275) 46
GTE (276) 48
DEQ (277) 50
NE (278) 49
EQ (279) 51
AEQ (280) 52
SEQ (281) 53
MEQ (282) 54
DIEQ (283) 55
FDEQ (284) 56
EEQ (285) 57
MOEQ (286) 58
BLEQ (287) 59
BREQ (288) 60
IS (289) 61
ISN (290) 62
IN (291) 63
NIN (292) 64
LSHIFT (293) 69
RSHIFT (294) 70
BAND (295) 65
BOR (296) 66
BXOR (297) 67
BNOT (298) 68
IF (299) 10
ELSE (300) 12
ELIF (301) 14
WHILE (302) 17
FOR (303)
TRUE (304) 25
FALSE (305) 26
DELIMITER (306)
COLON (307) 10 12 14 17
TAB (308)
NL (309) 3 10 12 14 17 18
SPACE (310) 18
LIST (311)
SET (312)
TUPLE (313)
DICT (314)
"(" (315) 28
")" (316) 28


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
G (63)
    on left: 1, on right: 0
P (64)
    on left: 2 3 4, on right: 1 3
S (65)
    on left: 5 6 7 8 9, on right: 2 3 18
if_statement (66)
    on left: 10, on right: 5
else_elif (67)
    on left: 11, on right: 5
else_statement (68)
    on left: 12 13, on right: 6 11
elif_statement (69)
    on left: 14 15 16, on right: 11 15
while_statement (70)
    on left: 17, on right: 6
indent_statement (71)
    on left: 18 19 20, on right: 10 12 14 17 19
B (72)
    on left: 21 22 23 24 25 26, on right: 10 14 17 21 22 23
E (73)
    on left: 27 28 29 30 31 32, on right: 7 8 24 27 28 29
oper (74)
    on left: 33 34 35 36 37, on right: 27
arith (75)
    on left: 38 39 40 41 42 43 44, on right: 33
relop (76)
    on left: 45 46 47 48 49 50, on right: 34
assign (77)
    on left: 51 52 53 54 55 56 57 58 59 60, on right: 7
identity (78)
    on left: 61 62, on right: 35
membership (79)
    on left: 63 64, on right: 36
bitwise (80)
    on left: 65 66 67 68 69 70, on right: 37


state 0

    0 $accept: . G $end

    id     shift, and go to state 1
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    IF     shift, and go to state 5
    WHILE  shift, and go to state 6
    "("    shift, and go to state 7

    $end      reduce using rule 4 (P)
    $end      [reduce using rule 9 (S)]
    NL        reduce using rule 9 (S)
    $default  reduce using rule 4 (P)

    G                go to state 8
    P                go to state 9
    S                go to state 10
    if_statement     go to state 11
    while_statement  go to state 12
    E                go to state 13


state 1

    7 S: id . assign E
   30 E: id .

    EQ    shift, and go to state 14
    AEQ   shift, and go to state 15
    SEQ   shift, and go to state 16
    MEQ   shift, and go to state 17
    DIEQ  shift, and go to state 18
    FDEQ  shift, and go to state 19
    EEQ   shift, and go to state 20
    MOEQ  shift, and go to state 21
    BLEQ  shift, and go to state 22
    BREQ  shift, and go to state 23

    $default  reduce using rule 30 (E)

    assign  go to state 24


state 2

   32 E: FLOAT .

    $default  reduce using rule 32 (E)


state 3

   31 E: INT .

    $default  reduce using rule 31 (E)


state 4

   29 E: MINUS . E

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 7

    E  go to state 26


state 5

   10 if_statement: IF . B COLON NL indent_statement

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 27
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 28
    FALSE  shift, and go to state 29
    "("    shift, and go to state 7

    B  go to state 30
    E  go to state 31


state 6

   17 while_statement: WHILE . B COLON NL indent_statement

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 27
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 28
    FALSE  shift, and go to state 29
    "("    shift, and go to state 7

    B  go to state 32
    E  go to state 31


state 7

   28 E: "(" . E ")"

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 7

    E  go to state 33


state 8

    0 $accept: G . $end

    $end  shift, and go to state 34


state 9

    1 G: P .

    $default  reduce using rule 1 (G)


state 10

    2 P: S .
    3  | S . NL P

    NL  shift, and go to state 35

    $default  reduce using rule 2 (P)


state 11

    5 S: if_statement . else_elif

    ELIF  shift, and go to state 36

    ELIF      [reduce using rule 16 (elif_statement)]
    $default  reduce using rule 16 (elif_statement)

    else_elif       go to state 37
    elif_statement  go to state 38


state 12

    6 S: while_statement . else_statement

    ELSE  shift, and go to state 39

    $default  reduce using rule 13 (else_statement)

    else_statement  go to state 40


state 13

    8 S: E .
   27 E: E . oper E

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    MUL     shift, and go to state 43
    DIV     shift, and go to state 44
    MOD     shift, and go to state 45
    EXP     shift, and go to state 46
    FDIV    shift, and go to state 47
    LT      shift, and go to state 48
    GT      shift, and go to state 49
    LTE     shift, and go to state 50
    GTE     shift, and go to state 51
    DEQ     shift, and go to state 52
    NE      shift, and go to state 53
    IS      shift, and go to state 54
    ISN     shift, and go to state 55
    IN      shift, and go to state 56
    NIN     shift, and go to state 57
    LSHIFT  shift, and go to state 58
    RSHIFT  shift, and go to state 59
    BAND    shift, and go to state 60
    BOR     shift, and go to state 61
    BXOR    shift, and go to state 62
    BNOT    shift, and go to state 63

    $default  reduce using rule 8 (S)

    oper        go to state 64
    arith       go to state 65
    relop       go to state 66
    identity    go to state 67
    membership  go to state 68
    bitwise     go to state 69


state 14

   51 assign: EQ .

    $default  reduce using rule 51 (assign)


state 15

   52 assign: AEQ .

    $default  reduce using rule 52 (assign)


state 16

   53 assign: SEQ .

    $default  reduce using rule 53 (assign)


state 17

   54 assign: MEQ .

    $default  reduce using rule 54 (assign)


state 18

   55 assign: DIEQ .

    $default  reduce using rule 55 (assign)


state 19

   56 assign: FDEQ .

    $default  reduce using rule 56 (assign)


state 20

   57 assign: EEQ .

    $default  reduce using rule 57 (assign)


state 21

   58 assign: MOEQ .

    $default  reduce using rule 58 (assign)


state 22

   59 assign: BLEQ .

    $default  reduce using rule 59 (assign)


state 23

   60 assign: BREQ .

    $default  reduce using rule 60 (assign)


state 24

    7 S: id assign . E

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 7

    E  go to state 70


state 25

   30 E: id .

    $default  reduce using rule 30 (E)


state 26

   27 E: E . oper E
   29  | MINUS E .

    MUL   shift, and go to state 43
    DIV   shift, and go to state 44
    MOD   shift, and go to state 45
    EXP   shift, and go to state 46
    FDIV  shift, and go to state 47
    BNOT  shift, and go to state 63

    $default  reduce using rule 29 (E)

    oper        go to state 64
    arith       go to state 65
    relop       go to state 66
    identity    go to state 67
    membership  go to state 68
    bitwise     go to state 69


state 27

   23 B: NOT . B

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 27
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 28
    FALSE  shift, and go to state 29
    "("    shift, and go to state 7

    B  go to state 71
    E  go to state 31


state 28

   25 B: TRUE .

    $default  reduce using rule 25 (B)


state 29

   26 B: FALSE .

    $default  reduce using rule 26 (B)


state 30

   10 if_statement: IF B . COLON NL indent_statement
   21 B: B . OR B
   22  | B . AND B

    AND    shift, and go to state 72
    OR     shift, and go to state 73
    COLON  shift, and go to state 74


state 31

   24 B: E .
   27 E: E . oper E

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    MUL     shift, and go to state 43
    DIV     shift, and go to state 44
    MOD     shift, and go to state 45
    EXP     shift, and go to state 46
    FDIV    shift, and go to state 47
    LT      shift, and go to state 48
    GT      shift, and go to state 49
    LTE     shift, and go to state 50
    GTE     shift, and go to state 51
    DEQ     shift, and go to state 52
    NE      shift, and go to state 53
    IS      shift, and go to state 54
    ISN     shift, and go to state 55
    IN      shift, and go to state 56
    NIN     shift, and go to state 57
    LSHIFT  shift, and go to state 58
    RSHIFT  shift, and go to state 59
    BAND    shift, and go to state 60
    BOR     shift, and go to state 61
    BXOR    shift, and go to state 62
    BNOT    shift, and go to state 63

    $default  reduce using rule 24 (B)

    oper        go to state 64
    arith       go to state 65
    relop       go to state 66
    identity    go to state 67
    membership  go to state 68
    bitwise     go to state 69


state 32

   17 while_statement: WHILE B . COLON NL indent_statement
   21 B: B . OR B
   22  | B . AND B

    AND    shift, and go to state 72
    OR     shift, and go to state 73
    COLON  shift, and go to state 75


state 33

   27 E: E . oper E
   28  | "(" E . ")"

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    MUL     shift, and go to state 43
    DIV     shift, and go to state 44
    MOD     shift, and go to state 45
    EXP     shift, and go to state 46
    FDIV    shift, and go to state 47
    LT      shift, and go to state 48
    GT      shift, and go to state 49
    LTE     shift, and go to state 50
    GTE     shift, and go to state 51
    DEQ     shift, and go to state 52
    NE      shift, and go to state 53
    IS      shift, and go to state 54
    ISN     shift, and go to state 55
    IN      shift, and go to state 56
    NIN     shift, and go to state 57
    LSHIFT  shift, and go to state 58
    RSHIFT  shift, and go to state 59
    BAND    shift, and go to state 60
    BOR     shift, and go to state 61
    BXOR    shift, and go to state 62
    BNOT    shift, and go to state 63
    ")"     shift, and go to state 76

    oper        go to state 64
    arith       go to state 65
    relop       go to state 66
    identity    go to state 67
    membership  go to state 68
    bitwise     go to state 69


state 34

    0 $accept: G $end .

    $default  accept


state 35

    3 P: S NL . P

    id     shift, and go to state 1
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    IF     shift, and go to state 5
    WHILE  shift, and go to state 6
    "("    shift, and go to state 7

    $end      reduce using rule 4 (P)
    $end      [reduce using rule 9 (S)]
    NL        reduce using rule 9 (S)
    $default  reduce using rule 4 (P)

    P                go to state 77
    S                go to state 10
    if_statement     go to state 11
    while_statement  go to state 12
    E                go to state 13


state 36

   14 elif_statement: ELIF . B COLON NL indent_statement

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 27
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 28
    FALSE  shift, and go to state 29
    "("    shift, and go to state 7

    B  go to state 78
    E  go to state 31


state 37

    5 S: if_statement else_elif .

    $default  reduce using rule 5 (S)


state 38

   11 else_elif: elif_statement . else_statement
   15 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 39
    ELIF  shift, and go to state 36

    $end      reduce using rule 13 (else_statement)
    $end      [reduce using rule 16 (elif_statement)]
    ELSE      [reduce using rule 16 (elif_statement)]
    ELIF      [reduce using rule 16 (elif_statement)]
    NL        reduce using rule 13 (else_statement)
    NL        [reduce using rule 16 (elif_statement)]
    $default  reduce using rule 13 (else_statement)

    else_statement  go to state 79
    elif_statement  go to state 80


state 39

   12 else_statement: ELSE . COLON NL indent_statement

    COLON  shift, and go to state 81


state 40

    6 S: while_statement else_statement .

    $default  reduce using rule 6 (S)


state 41

   38 arith: PLUS .

    $default  reduce using rule 38 (arith)


state 42

   39 arith: MINUS .

    $default  reduce using rule 39 (arith)


state 43

   40 arith: MUL .

    $default  reduce using rule 40 (arith)


state 44

   41 arith: DIV .

    $default  reduce using rule 41 (arith)


state 45

   44 arith: MOD .

    $default  reduce using rule 44 (arith)


state 46

   43 arith: EXP .

    $default  reduce using rule 43 (arith)


state 47

   42 arith: FDIV .

    $default  reduce using rule 42 (arith)


state 48

   45 relop: LT .

    $default  reduce using rule 45 (relop)


state 49

   47 relop: GT .

    $default  reduce using rule 47 (relop)


state 50

   46 relop: LTE .

    $default  reduce using rule 46 (relop)


state 51

   48 relop: GTE .

    $default  reduce using rule 48 (relop)


state 52

   50 relop: DEQ .

    $default  reduce using rule 50 (relop)


state 53

   49 relop: NE .

    $default  reduce using rule 49 (relop)


state 54

   61 identity: IS .

    $default  reduce using rule 61 (identity)


state 55

   62 identity: ISN .

    $default  reduce using rule 62 (identity)


state 56

   63 membership: IN .

    $default  reduce using rule 63 (membership)


state 57

   64 membership: NIN .

    $default  reduce using rule 64 (membership)


state 58

   69 bitwise: LSHIFT .

    $default  reduce using rule 69 (bitwise)


state 59

   70 bitwise: RSHIFT .

    $default  reduce using rule 70 (bitwise)


state 60

   65 bitwise: BAND .

    $default  reduce using rule 65 (bitwise)


state 61

   66 bitwise: BOR .

    $default  reduce using rule 66 (bitwise)


state 62

   67 bitwise: BXOR .

    $default  reduce using rule 67 (bitwise)


state 63

   68 bitwise: BNOT .

    $default  reduce using rule 68 (bitwise)


state 64

   27 E: E oper . E

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    "("    shift, and go to state 7

    E  go to state 82


state 65

   33 oper: arith .

    $default  reduce using rule 33 (oper)


state 66

   34 oper: relop .

    $default  reduce using rule 34 (oper)


state 67

   35 oper: identity .

    $default  reduce using rule 35 (oper)


state 68

   36 oper: membership .

    $default  reduce using rule 36 (oper)


state 69

   37 oper: bitwise .

    $default  reduce using rule 37 (oper)


state 70

    7 S: id assign E .
   27 E: E . oper E

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    MUL     shift, and go to state 43
    DIV     shift, and go to state 44
    MOD     shift, and go to state 45
    EXP     shift, and go to state 46
    FDIV    shift, and go to state 47
    LT      shift, and go to state 48
    GT      shift, and go to state 49
    LTE     shift, and go to state 50
    GTE     shift, and go to state 51
    DEQ     shift, and go to state 52
    NE      shift, and go to state 53
    IS      shift, and go to state 54
    ISN     shift, and go to state 55
    IN      shift, and go to state 56
    NIN     shift, and go to state 57
    LSHIFT  shift, and go to state 58
    RSHIFT  shift, and go to state 59
    BAND    shift, and go to state 60
    BOR     shift, and go to state 61
    BXOR    shift, and go to state 62
    BNOT    shift, and go to state 63

    $default  reduce using rule 7 (S)

    oper        go to state 64
    arith       go to state 65
    relop       go to state 66
    identity    go to state 67
    membership  go to state 68
    bitwise     go to state 69


state 71

   21 B: B . OR B
   22  | B . AND B
   23  | NOT B .

    $default  reduce using rule 23 (B)


state 72

   22 B: B AND . B

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 27
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 28
    FALSE  shift, and go to state 29
    "("    shift, and go to state 7

    B  go to state 83
    E  go to state 31


state 73

   21 B: B OR . B

    id     shift, and go to state 25
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    NOT    shift, and go to state 27
    MINUS  shift, and go to state 4
    TRUE   shift, and go to state 28
    FALSE  shift, and go to state 29
    "("    shift, and go to state 7

    B  go to state 84
    E  go to state 31


state 74

   10 if_statement: IF B COLON . NL indent_statement

    NL  shift, and go to state 85


state 75

   17 while_statement: WHILE B COLON . NL indent_statement

    NL  shift, and go to state 86


state 76

   28 E: "(" E ")" .

    $default  reduce using rule 28 (E)


state 77

    3 P: S NL P .

    $default  reduce using rule 3 (P)


state 78

   14 elif_statement: ELIF B . COLON NL indent_statement
   21 B: B . OR B
   22  | B . AND B

    AND    shift, and go to state 72
    OR     shift, and go to state 73
    COLON  shift, and go to state 87


state 79

   11 else_elif: elif_statement else_statement .

    $default  reduce using rule 11 (else_elif)


state 80

   15 elif_statement: elif_statement . elif_statement
   15               | elif_statement elif_statement .

    ELIF  shift, and go to state 36

    $end      reduce using rule 15 (elif_statement)
    $end      [reduce using rule 16 (elif_statement)]
    ELSE      reduce using rule 15 (elif_statement)
    ELSE      [reduce using rule 16 (elif_statement)]
    ELIF      [reduce using rule 15 (elif_statement)]
    ELIF      [reduce using rule 16 (elif_statement)]
    NL        reduce using rule 15 (elif_statement)
    NL        [reduce using rule 16 (elif_statement)]
    $default  reduce using rule 15 (elif_statement)

    elif_statement  go to state 80


state 81

   12 else_statement: ELSE COLON . NL indent_statement

    NL  shift, and go to state 88


state 82

   27 E: E . oper E
   27  | E oper E .

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    MUL     shift, and go to state 43
    DIV     shift, and go to state 44
    MOD     shift, and go to state 45
    EXP     shift, and go to state 46
    FDIV    shift, and go to state 47
    LT      shift, and go to state 48
    GT      shift, and go to state 49
    LTE     shift, and go to state 50
    GTE     shift, and go to state 51
    DEQ     shift, and go to state 52
    NE      shift, and go to state 53
    IS      shift, and go to state 54
    ISN     shift, and go to state 55
    IN      shift, and go to state 56
    NIN     shift, and go to state 57
    LSHIFT  shift, and go to state 58
    RSHIFT  shift, and go to state 59
    BAND    shift, and go to state 60
    BOR     shift, and go to state 61
    BXOR    shift, and go to state 62
    BNOT    shift, and go to state 63

    PLUS      [reduce using rule 27 (E)]
    MINUS     [reduce using rule 27 (E)]
    MUL       [reduce using rule 27 (E)]
    DIV       [reduce using rule 27 (E)]
    MOD       [reduce using rule 27 (E)]
    EXP       [reduce using rule 27 (E)]
    FDIV      [reduce using rule 27 (E)]
    LT        [reduce using rule 27 (E)]
    GT        [reduce using rule 27 (E)]
    LTE       [reduce using rule 27 (E)]
    GTE       [reduce using rule 27 (E)]
    DEQ       [reduce using rule 27 (E)]
    NE        [reduce using rule 27 (E)]
    IS        [reduce using rule 27 (E)]
    ISN       [reduce using rule 27 (E)]
    IN        [reduce using rule 27 (E)]
    NIN       [reduce using rule 27 (E)]
    LSHIFT    [reduce using rule 27 (E)]
    RSHIFT    [reduce using rule 27 (E)]
    BAND      [reduce using rule 27 (E)]
    BOR       [reduce using rule 27 (E)]
    BXOR      [reduce using rule 27 (E)]
    BNOT      [reduce using rule 27 (E)]
    $default  reduce using rule 27 (E)

    oper        go to state 64
    arith       go to state 65
    relop       go to state 66
    identity    go to state 67
    membership  go to state 68
    bitwise     go to state 69


state 83

   21 B: B . OR B
   22  | B . AND B
   22  | B AND B .

    $default  reduce using rule 22 (B)


state 84

   21 B: B . OR B
   21  | B OR B .
   22  | B . AND B

    AND  shift, and go to state 72

    $default  reduce using rule 21 (B)


state 85

   10 if_statement: IF B COLON NL . indent_statement

    SPACE  shift, and go to state 89

    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 20 (indent_statement)

    indent_statement  go to state 90


state 86

   17 while_statement: WHILE B COLON NL . indent_statement

    SPACE  shift, and go to state 89

    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 20 (indent_statement)

    indent_statement  go to state 91


state 87

   14 elif_statement: ELIF B COLON . NL indent_statement

    NL  shift, and go to state 92


state 88

   12 else_statement: ELSE COLON NL . indent_statement

    SPACE  shift, and go to state 89

    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 20 (indent_statement)

    indent_statement  go to state 93


state 89

   18 indent_statement: SPACE . S NL

    id     shift, and go to state 1
    FLOAT  shift, and go to state 2
    INT    shift, and go to state 3
    MINUS  shift, and go to state 4
    IF     shift, and go to state 5
    WHILE  shift, and go to state 6
    "("    shift, and go to state 7

    $default  reduce using rule 9 (S)

    S                go to state 94
    if_statement     go to state 11
    while_statement  go to state 12
    E                go to state 13


state 90

   10 if_statement: IF B COLON NL indent_statement .
   19 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 89

    $end      reduce using rule 10 (if_statement)
    $end      [reduce using rule 20 (indent_statement)]
    ELSE      reduce using rule 10 (if_statement)
    ELSE      [reduce using rule 20 (indent_statement)]
    ELIF      reduce using rule 10 (if_statement)
    ELIF      [reduce using rule 20 (indent_statement)]
    NL        reduce using rule 10 (if_statement)
    NL        [reduce using rule 20 (indent_statement)]
    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 10 (if_statement)

    indent_statement  go to state 95


state 91

   17 while_statement: WHILE B COLON NL indent_statement .
   19 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 89

    $end      reduce using rule 17 (while_statement)
    $end      [reduce using rule 20 (indent_statement)]
    ELSE      reduce using rule 17 (while_statement)
    ELSE      [reduce using rule 20 (indent_statement)]
    NL        reduce using rule 17 (while_statement)
    NL        [reduce using rule 20 (indent_statement)]
    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 17 (while_statement)

    indent_statement  go to state 95


state 92

   14 elif_statement: ELIF B COLON NL . indent_statement

    SPACE  shift, and go to state 89

    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 20 (indent_statement)

    indent_statement  go to state 96


state 93

   12 else_statement: ELSE COLON NL indent_statement .
   19 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 89

    $end      reduce using rule 12 (else_statement)
    $end      [reduce using rule 20 (indent_statement)]
    NL        reduce using rule 12 (else_statement)
    NL        [reduce using rule 20 (indent_statement)]
    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 12 (else_statement)

    indent_statement  go to state 95


state 94

   18 indent_statement: SPACE S . NL

    NL  shift, and go to state 97


state 95

   19 indent_statement: indent_statement . indent_statement
   19                 | indent_statement indent_statement .

    SPACE  shift, and go to state 89

    $end      reduce using rule 19 (indent_statement)
    $end      [reduce using rule 20 (indent_statement)]
    ELSE      reduce using rule 19 (indent_statement)
    ELSE      [reduce using rule 20 (indent_statement)]
    ELIF      reduce using rule 19 (indent_statement)
    ELIF      [reduce using rule 20 (indent_statement)]
    NL        reduce using rule 19 (indent_statement)
    NL        [reduce using rule 20 (indent_statement)]
    SPACE     [reduce using rule 19 (indent_statement)]
    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 19 (indent_statement)

    indent_statement  go to state 95


state 96

   14 elif_statement: ELIF B COLON NL indent_statement .
   19 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 89

    $end      reduce using rule 14 (elif_statement)
    $end      [reduce using rule 20 (indent_statement)]
    ELSE      reduce using rule 14 (elif_statement)
    ELSE      [reduce using rule 20 (indent_statement)]
    ELIF      reduce using rule 14 (elif_statement)
    ELIF      [reduce using rule 20 (indent_statement)]
    NL        reduce using rule 14 (elif_statement)
    NL        [reduce using rule 20 (indent_statement)]
    SPACE     [reduce using rule 20 (indent_statement)]
    $default  reduce using rule 14 (elif_statement)

    indent_statement  go to state 95


state 97

   18 indent_statement: SPACE S NL .

    $default  reduce using rule 18 (indent_statement)
