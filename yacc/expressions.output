Terminals unused in grammar

   ID
   LITERAL
   membership
   identity
   bitwise
   WHILE
   FOR
   DELIMITER
   TAB
   '+'
   '-'
   '*'
   '/'
   '%'


State 4 conflicts: 1 shift/reduce
State 19 conflicts: 2 shift/reduce, 2 reduce/reduce
State 22 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce, 4 reduce/reduce
State 38 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce
State 40 conflicts: 3 shift/reduce


Grammar

    0 $accept: S $end

    1 S: if_statement else_elif
    2  | /* empty */

    3 if_statement: IF B COLON NL SPACE S NL

    4 else_elif: elif_statement else_statement

    5 else_statement: ELSE COLON NL SPACE S NL
    6               | /* empty */

    7 elif_statement: ELIF B COLON NL SPACE S NL
    8               | elif_statement elif_statement
    9               | /* empty */

   10 B: B OR B
   11  | B AND B
   12  | NOT B
   13  | E
   14  | TRUE
   15  | FALSE

   16 S: id assign E

   17 E: E arith E
   18  | E "-" E
   19  | E relop E
   20  | "(" E ")"
   21  | "-" E
   22  | id
   23  | INT
   24  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
id (258) 16 22
ID (259)
LITERAL (260)
FLOAT (261) 24
INT (262) 23
relop (263) 19
arith (264) 17
assign (265) 16
AND (266) 11
OR (267) 10
NOT (268) 12
membership (269)
identity (270)
bitwise (271)
IF (272) 3
ELSE (273) 5
ELIF (274) 7
WHILE (275)
FOR (276)
TRUE (277) 14
FALSE (278) 15
DELIMITER (279)
COLON (280) 3 5 7
TAB (281)
NL (282) 3 5 7
SPACE (283) 3 5 7
UMINUS (284)
"-" (285) 18 21
"(" (286) 20
")" (287) 20


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
S (39)
    on left: 1 2 16, on right: 0 3 5 7
if_statement (40)
    on left: 3, on right: 1
else_elif (41)
    on left: 4, on right: 1
else_statement (42)
    on left: 5 6, on right: 4
elif_statement (43)
    on left: 7 8 9, on right: 4 8
B (44)
    on left: 10 11 12 13 14 15, on right: 3 7 10 11 12
E (45)
    on left: 17 18 19 20 21 22 23 24, on right: 13 16 17 18 19 20 21


state 0

    0 $accept: . S $end

    id  shift, and go to state 1
    IF  shift, and go to state 2

    $default  reduce using rule 2 (S)

    S             go to state 3
    if_statement  go to state 4


state 1

   16 S: id . assign E

    assign  shift, and go to state 5


state 2

    3 if_statement: IF . B COLON NL SPACE S NL

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    NOT    shift, and go to state 9
    TRUE   shift, and go to state 10
    FALSE  shift, and go to state 11
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    B  go to state 14
    E  go to state 15


state 3

    0 $accept: S . $end

    $end  shift, and go to state 16


state 4

    1 S: if_statement . else_elif

    ELIF  shift, and go to state 17

    ELIF      [reduce using rule 9 (elif_statement)]
    $default  reduce using rule 9 (elif_statement)

    else_elif       go to state 18
    elif_statement  go to state 19


state 5

   16 S: id assign . E

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    E  go to state 20


state 6

   22 E: id .

    $default  reduce using rule 22 (E)


state 7

   24 E: FLOAT .

    $default  reduce using rule 24 (E)


state 8

   23 E: INT .

    $default  reduce using rule 23 (E)


state 9

   12 B: NOT . B

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    NOT    shift, and go to state 9
    TRUE   shift, and go to state 10
    FALSE  shift, and go to state 11
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    B  go to state 21
    E  go to state 15


state 10

   14 B: TRUE .

    $default  reduce using rule 14 (B)


state 11

   15 B: FALSE .

    $default  reduce using rule 15 (B)


state 12

   21 E: "-" . E

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    E  go to state 22


state 13

   20 E: "(" . E ")"

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    E  go to state 23


state 14

    3 if_statement: IF B . COLON NL SPACE S NL
   10 B: B . OR B
   11  | B . AND B

    AND    shift, and go to state 24
    OR     shift, and go to state 25
    COLON  shift, and go to state 26


state 15

   13 B: E .
   17 E: E . arith E
   18  | E . "-" E
   19  | E . relop E

    relop  shift, and go to state 27
    arith  shift, and go to state 28
    "-"    shift, and go to state 29

    $default  reduce using rule 13 (B)


state 16

    0 $accept: S $end .

    $default  accept


state 17

    7 elif_statement: ELIF . B COLON NL SPACE S NL

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    NOT    shift, and go to state 9
    TRUE   shift, and go to state 10
    FALSE  shift, and go to state 11
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    B  go to state 30
    E  go to state 15


state 18

    1 S: if_statement else_elif .

    $default  reduce using rule 1 (S)


state 19

    4 else_elif: elif_statement . else_statement
    8 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 31
    ELIF  shift, and go to state 17

    $end      reduce using rule 6 (else_statement)
    $end      [reduce using rule 9 (elif_statement)]
    ELSE      [reduce using rule 9 (elif_statement)]
    ELIF      [reduce using rule 9 (elif_statement)]
    NL        reduce using rule 6 (else_statement)
    NL        [reduce using rule 9 (elif_statement)]
    $default  reduce using rule 6 (else_statement)

    else_statement  go to state 32
    elif_statement  go to state 33


state 20

   16 S: id assign E .
   17 E: E . arith E
   18  | E . "-" E
   19  | E . relop E

    relop  shift, and go to state 27
    arith  shift, and go to state 28
    "-"    shift, and go to state 29

    $default  reduce using rule 16 (S)


state 21

   10 B: B . OR B
   11  | B . AND B
   12  | NOT B .

    $default  reduce using rule 12 (B)


state 22

   17 E: E . arith E
   18  | E . "-" E
   19  | E . relop E
   21  | "-" E .

    "-"  shift, and go to state 29

    "-"       [reduce using rule 21 (E)]
    $default  reduce using rule 21 (E)


state 23

   17 E: E . arith E
   18  | E . "-" E
   19  | E . relop E
   20  | "(" E . ")"

    relop  shift, and go to state 27
    arith  shift, and go to state 28
    "-"    shift, and go to state 29
    ")"    shift, and go to state 34


state 24

   11 B: B AND . B

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    NOT    shift, and go to state 9
    TRUE   shift, and go to state 10
    FALSE  shift, and go to state 11
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    B  go to state 35
    E  go to state 15


state 25

   10 B: B OR . B

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    NOT    shift, and go to state 9
    TRUE   shift, and go to state 10
    FALSE  shift, and go to state 11
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    B  go to state 36
    E  go to state 15


state 26

    3 if_statement: IF B COLON . NL SPACE S NL

    NL  shift, and go to state 37


state 27

   19 E: E relop . E

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    E  go to state 38


state 28

   17 E: E arith . E

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    E  go to state 39


state 29

   18 E: E "-" . E

    id     shift, and go to state 6
    FLOAT  shift, and go to state 7
    INT    shift, and go to state 8
    "-"    shift, and go to state 12
    "("    shift, and go to state 13

    E  go to state 40


state 30

    7 elif_statement: ELIF B . COLON NL SPACE S NL
   10 B: B . OR B
   11  | B . AND B

    AND    shift, and go to state 24
    OR     shift, and go to state 25
    COLON  shift, and go to state 41


state 31

    5 else_statement: ELSE . COLON NL SPACE S NL

    COLON  shift, and go to state 42


state 32

    4 else_elif: elif_statement else_statement .

    $default  reduce using rule 4 (else_elif)


state 33

    8 elif_statement: elif_statement . elif_statement
    8               | elif_statement elif_statement .

    ELIF  shift, and go to state 17

    $end      reduce using rule 8 (elif_statement)
    $end      [reduce using rule 9 (elif_statement)]
    ELSE      reduce using rule 8 (elif_statement)
    ELSE      [reduce using rule 9 (elif_statement)]
    ELIF      [reduce using rule 8 (elif_statement)]
    ELIF      [reduce using rule 9 (elif_statement)]
    NL        reduce using rule 8 (elif_statement)
    NL        [reduce using rule 9 (elif_statement)]
    $default  reduce using rule 8 (elif_statement)

    elif_statement  go to state 33


state 34

   20 E: "(" E ")" .

    $default  reduce using rule 20 (E)


state 35

   10 B: B . OR B
   11  | B . AND B
   11  | B AND B .

    $default  reduce using rule 11 (B)


state 36

   10 B: B . OR B
   10  | B OR B .
   11  | B . AND B

    AND  shift, and go to state 24

    $default  reduce using rule 10 (B)


state 37

    3 if_statement: IF B COLON NL . SPACE S NL

    SPACE  shift, and go to state 43


state 38

   17 E: E . arith E
   18  | E . "-" E
   19  | E . relop E
   19  | E relop E .

    arith  shift, and go to state 28
    "-"    shift, and go to state 29

    "-"       [reduce using rule 19 (E)]
    $default  reduce using rule 19 (E)


state 39

   17 E: E . arith E
   17  | E arith E .
   18  | E . "-" E
   19  | E . relop E

    "-"  shift, and go to state 29

    "-"       [reduce using rule 17 (E)]
    $default  reduce using rule 17 (E)


state 40

   17 E: E . arith E
   18  | E . "-" E
   18  | E "-" E .
   19  | E . relop E

    relop  shift, and go to state 27
    arith  shift, and go to state 28
    "-"    shift, and go to state 29

    relop     [reduce using rule 18 (E)]
    arith     [reduce using rule 18 (E)]
    "-"       [reduce using rule 18 (E)]
    $default  reduce using rule 18 (E)


state 41

    7 elif_statement: ELIF B COLON . NL SPACE S NL

    NL  shift, and go to state 44


state 42

    5 else_statement: ELSE COLON . NL SPACE S NL

    NL  shift, and go to state 45


state 43

    3 if_statement: IF B COLON NL SPACE . S NL

    id  shift, and go to state 1
    IF  shift, and go to state 2

    $default  reduce using rule 2 (S)

    S             go to state 46
    if_statement  go to state 4


state 44

    7 elif_statement: ELIF B COLON NL . SPACE S NL

    SPACE  shift, and go to state 47


state 45

    5 else_statement: ELSE COLON NL . SPACE S NL

    SPACE  shift, and go to state 48


state 46

    3 if_statement: IF B COLON NL SPACE S . NL

    NL  shift, and go to state 49


state 47

    7 elif_statement: ELIF B COLON NL SPACE . S NL

    id  shift, and go to state 1
    IF  shift, and go to state 2

    $default  reduce using rule 2 (S)

    S             go to state 50
    if_statement  go to state 4


state 48

    5 else_statement: ELSE COLON NL SPACE . S NL

    id  shift, and go to state 1
    IF  shift, and go to state 2

    $default  reduce using rule 2 (S)

    S             go to state 51
    if_statement  go to state 4


state 49

    3 if_statement: IF B COLON NL SPACE S NL .

    $default  reduce using rule 3 (if_statement)


state 50

    7 elif_statement: ELIF B COLON NL SPACE S . NL

    NL  shift, and go to state 52


state 51

    5 else_statement: ELSE COLON NL SPACE S . NL

    NL  shift, and go to state 53


state 52

    7 elif_statement: ELIF B COLON NL SPACE S NL .

    $default  reduce using rule 7 (elif_statement)


state 53

    5 else_statement: ELSE COLON NL SPACE S NL .

    $default  reduce using rule 5 (else_statement)
