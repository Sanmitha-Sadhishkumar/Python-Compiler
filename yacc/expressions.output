Terminals unused in grammar

   ID
   LITERAL
   membership
   identity
   bitwise
   FOR
   DELIMITER
   TAB
   '+'
   '-'
   '*'
   '/'
   '%'


State 7 conflicts: 1 shift/reduce
State 8 conflicts: 1 shift/reduce
State 25 conflicts: 2 shift/reduce, 4 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce, 4 reduce/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 50 conflicts: 3 shift/reduce
State 55 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce
State 62 conflicts: 1 shift/reduce


Grammar

    0 $accept: G $end

    1 G: P

    2 P: S
    3  | S NL P
    4  | /* empty */

    5 S: if_statement else_elif
    6  | while_statement else_statement
    7  | id assign E

    8 if_statement: IF B COLON NL indent_statement

    9 else_elif: elif_statement else_statement

   10 else_statement: ELSE COLON NL indent_statement
   11               | /* empty */

   12 elif_statement: ELIF B COLON NL indent_statement
   13               | elif_statement elif_statement
   14               | /* empty */

   15 while_statement: WHILE B COLON NL indent_statement

   16 indent_statement: SPACE S
   17                 | indent_statement NL indent_statement
   18                 | /* empty */

   19 B: B OR B
   20  | B AND B
   21  | NOT B
   22  | E
   23  | TRUE
   24  | FALSE

   25 E: E arith E
   26  | E "-" E
   27  | E relop E
   28  | "(" E ")"
   29  | "-" E
   30  | id
   31  | INT
   32  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
id (258) 7 30
ID (259)
LITERAL (260)
FLOAT (261) 32
INT (262) 31
relop (263) 27
arith (264) 25
assign (265) 7
AND (266) 20
OR (267) 19
NOT (268) 21
membership (269)
identity (270)
bitwise (271)
IF (272) 8
ELSE (273) 10
ELIF (274) 12
WHILE (275) 15
FOR (276)
TRUE (277) 23
FALSE (278) 24
DELIMITER (279)
COLON (280) 8 10 12 15
TAB (281)
NL (282) 3 8 10 12 15 17
SPACE (283) 16
UMINUS (284)
"-" (285) 26 29
"(" (286) 28
")" (287) 28


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
G (39)
    on left: 1, on right: 0
P (40)
    on left: 2 3 4, on right: 1 3
S (41)
    on left: 5 6 7, on right: 2 3 16
if_statement (42)
    on left: 8, on right: 5
else_elif (43)
    on left: 9, on right: 5
else_statement (44)
    on left: 10 11, on right: 6 9
elif_statement (45)
    on left: 12 13 14, on right: 9 13
while_statement (46)
    on left: 15, on right: 6
indent_statement (47)
    on left: 16 17 18, on right: 8 10 12 15 17
B (48)
    on left: 19 20 21 22 23 24, on right: 8 12 15 19 20 21
E (49)
    on left: 25 26 27 28 29 30 31 32, on right: 7 22 25 26 27 28 29


state 0

    0 $accept: . G $end

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 4 (P)

    G                go to state 4
    P                go to state 5
    S                go to state 6
    if_statement     go to state 7
    while_statement  go to state 8


state 1

    7 S: id . assign E

    assign  shift, and go to state 9


state 2

    8 if_statement: IF . B COLON NL indent_statement

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 18
    E  go to state 19


state 3

   15 while_statement: WHILE . B COLON NL indent_statement

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 20
    E  go to state 19


state 4

    0 $accept: G . $end

    $end  shift, and go to state 21


state 5

    1 G: P .

    $default  reduce using rule 1 (G)


state 6

    2 P: S .
    3  | S . NL P

    NL  shift, and go to state 22

    $default  reduce using rule 2 (P)


state 7

    5 S: if_statement . else_elif

    ELIF  shift, and go to state 23

    ELIF      [reduce using rule 14 (elif_statement)]
    $default  reduce using rule 14 (elif_statement)

    else_elif       go to state 24
    elif_statement  go to state 25


state 8

    6 S: while_statement . else_statement

    ELSE  shift, and go to state 26

    ELSE      [reduce using rule 11 (else_statement)]
    $default  reduce using rule 11 (else_statement)

    else_statement  go to state 27


state 9

    7 S: id assign . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 28


state 10

   30 E: id .

    $default  reduce using rule 30 (E)


state 11

   32 E: FLOAT .

    $default  reduce using rule 32 (E)


state 12

   31 E: INT .

    $default  reduce using rule 31 (E)


state 13

   21 B: NOT . B

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 29
    E  go to state 19


state 14

   23 B: TRUE .

    $default  reduce using rule 23 (B)


state 15

   24 B: FALSE .

    $default  reduce using rule 24 (B)


state 16

   29 E: "-" . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 30


state 17

   28 E: "(" . E ")"

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 31


state 18

    8 if_statement: IF B . COLON NL indent_statement
   19 B: B . OR B
   20  | B . AND B

    AND    shift, and go to state 32
    OR     shift, and go to state 33
    COLON  shift, and go to state 34


state 19

   22 B: E .
   25 E: E . arith E
   26  | E . "-" E
   27  | E . relop E

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    $default  reduce using rule 22 (B)


state 20

   15 while_statement: WHILE B . COLON NL indent_statement
   19 B: B . OR B
   20  | B . AND B

    AND    shift, and go to state 32
    OR     shift, and go to state 33
    COLON  shift, and go to state 38


state 21

    0 $accept: G $end .

    $default  accept


state 22

    3 P: S NL . P

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 4 (P)

    P                go to state 39
    S                go to state 6
    if_statement     go to state 7
    while_statement  go to state 8


state 23

   12 elif_statement: ELIF . B COLON NL indent_statement

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 40
    E  go to state 19


state 24

    5 S: if_statement else_elif .

    $default  reduce using rule 5 (S)


state 25

    9 else_elif: elif_statement . else_statement
   13 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 26
    ELIF  shift, and go to state 23

    $end      reduce using rule 11 (else_statement)
    $end      [reduce using rule 14 (elif_statement)]
    ELSE      [reduce using rule 11 (else_statement)]
    ELSE      [reduce using rule 14 (elif_statement)]
    ELIF      [reduce using rule 11 (else_statement)]
    ELIF      [reduce using rule 14 (elif_statement)]
    NL        reduce using rule 11 (else_statement)
    NL        [reduce using rule 14 (elif_statement)]
    $default  reduce using rule 11 (else_statement)

    else_statement  go to state 41
    elif_statement  go to state 42


state 26

   10 else_statement: ELSE . COLON NL indent_statement

    COLON  shift, and go to state 43


state 27

    6 S: while_statement else_statement .

    $default  reduce using rule 6 (S)


state 28

    7 S: id assign E .
   25 E: E . arith E
   26  | E . "-" E
   27  | E . relop E

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    $default  reduce using rule 7 (S)


state 29

   19 B: B . OR B
   20  | B . AND B
   21  | NOT B .

    $default  reduce using rule 21 (B)


state 30

   25 E: E . arith E
   26  | E . "-" E
   27  | E . relop E
   29  | "-" E .

    "-"  shift, and go to state 37

    "-"       [reduce using rule 29 (E)]
    $default  reduce using rule 29 (E)


state 31

   25 E: E . arith E
   26  | E . "-" E
   27  | E . relop E
   28  | "(" E . ")"

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37
    ")"    shift, and go to state 44


state 32

   20 B: B AND . B

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 45
    E  go to state 19


state 33

   19 B: B OR . B

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 46
    E  go to state 19


state 34

    8 if_statement: IF B COLON . NL indent_statement

    NL  shift, and go to state 47


state 35

   27 E: E relop . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 48


state 36

   25 E: E arith . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 49


state 37

   26 E: E "-" . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 50


state 38

   15 while_statement: WHILE B COLON . NL indent_statement

    NL  shift, and go to state 51


state 39

    3 P: S NL P .

    $default  reduce using rule 3 (P)


state 40

   12 elif_statement: ELIF B . COLON NL indent_statement
   19 B: B . OR B
   20  | B . AND B

    AND    shift, and go to state 32
    OR     shift, and go to state 33
    COLON  shift, and go to state 52


state 41

    9 else_elif: elif_statement else_statement .

    $default  reduce using rule 9 (else_elif)


state 42

   13 elif_statement: elif_statement . elif_statement
   13               | elif_statement elif_statement .

    ELIF  shift, and go to state 23

    $end      reduce using rule 13 (elif_statement)
    $end      [reduce using rule 14 (elif_statement)]
    ELSE      reduce using rule 13 (elif_statement)
    ELSE      [reduce using rule 14 (elif_statement)]
    ELIF      [reduce using rule 13 (elif_statement)]
    ELIF      [reduce using rule 14 (elif_statement)]
    NL        reduce using rule 13 (elif_statement)
    NL        [reduce using rule 14 (elif_statement)]
    $default  reduce using rule 13 (elif_statement)

    elif_statement  go to state 42


state 43

   10 else_statement: ELSE COLON . NL indent_statement

    NL  shift, and go to state 53


state 44

   28 E: "(" E ")" .

    $default  reduce using rule 28 (E)


state 45

   19 B: B . OR B
   20  | B . AND B
   20  | B AND B .

    $default  reduce using rule 20 (B)


state 46

   19 B: B . OR B
   19  | B OR B .
   20  | B . AND B

    AND  shift, and go to state 32

    $default  reduce using rule 19 (B)


state 47

    8 if_statement: IF B COLON NL . indent_statement

    SPACE  shift, and go to state 54

    $default  reduce using rule 18 (indent_statement)

    indent_statement  go to state 55


state 48

   25 E: E . arith E
   26  | E . "-" E
   27  | E . relop E
   27  | E relop E .

    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    "-"       [reduce using rule 27 (E)]
    $default  reduce using rule 27 (E)


state 49

   25 E: E . arith E
   25  | E arith E .
   26  | E . "-" E
   27  | E . relop E

    "-"  shift, and go to state 37

    "-"       [reduce using rule 25 (E)]
    $default  reduce using rule 25 (E)


state 50

   25 E: E . arith E
   26  | E . "-" E
   26  | E "-" E .
   27  | E . relop E

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    relop     [reduce using rule 26 (E)]
    arith     [reduce using rule 26 (E)]
    "-"       [reduce using rule 26 (E)]
    $default  reduce using rule 26 (E)


state 51

   15 while_statement: WHILE B COLON NL . indent_statement

    SPACE  shift, and go to state 54

    $default  reduce using rule 18 (indent_statement)

    indent_statement  go to state 56


state 52

   12 elif_statement: ELIF B COLON . NL indent_statement

    NL  shift, and go to state 57


state 53

   10 else_statement: ELSE COLON NL . indent_statement

    SPACE  shift, and go to state 54

    $default  reduce using rule 18 (indent_statement)

    indent_statement  go to state 58


state 54

   16 indent_statement: SPACE . S

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    S                go to state 59
    if_statement     go to state 7
    while_statement  go to state 8


state 55

    8 if_statement: IF B COLON NL indent_statement .
   17 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 60

    NL        [reduce using rule 8 (if_statement)]
    $default  reduce using rule 8 (if_statement)


state 56

   15 while_statement: WHILE B COLON NL indent_statement .
   17 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 60

    NL        [reduce using rule 15 (while_statement)]
    $default  reduce using rule 15 (while_statement)


state 57

   12 elif_statement: ELIF B COLON NL . indent_statement

    SPACE  shift, and go to state 54

    $default  reduce using rule 18 (indent_statement)

    indent_statement  go to state 61


state 58

   10 else_statement: ELSE COLON NL indent_statement .
   17 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 60

    NL        [reduce using rule 10 (else_statement)]
    $default  reduce using rule 10 (else_statement)


state 59

   16 indent_statement: SPACE S .

    $default  reduce using rule 16 (indent_statement)


state 60

   17 indent_statement: indent_statement NL . indent_statement

    SPACE  shift, and go to state 54

    $default  reduce using rule 18 (indent_statement)

    indent_statement  go to state 62


state 61

   12 elif_statement: ELIF B COLON NL indent_statement .
   17 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 60

    NL        [reduce using rule 12 (elif_statement)]
    $default  reduce using rule 12 (elif_statement)


state 62

   17 indent_statement: indent_statement . NL indent_statement
   17                 | indent_statement NL indent_statement .

    NL  shift, and go to state 60

    NL        [reduce using rule 17 (indent_statement)]
    $default  reduce using rule 17 (indent_statement)
