Terminals unused in grammar

   ID
   LITERAL
   relop
   '+'
   '-'


State 12 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: id assign E

    2 E: E arith E
    3  | "(" E ")"
    4  | "-" E
    5  | id
    6  | INT
    7  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'+' (43)
'-' (45)
error (256)
id (258) 1 5
ID (259)
LITERAL (260)
FLOAT (261) 7
INT (262) 6
relop (263)
arith (264) 2
assign (265) 1
UMINUS (266)
"(" (267) 3
")" (268) 3
"-" (269) 4


Nonterminals, with rules where they appear

$accept (17)
    on left: 0
S (18)
    on left: 1, on right: 0
E (19)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4


state 0

    0 $accept: . S $end

    id  shift, and go to state 1

    S  go to state 2


state 1

    1 S: id . assign E

    assign  shift, and go to state 3


state 2

    0 $accept: S . $end

    $end  shift, and go to state 4


state 3

    1 S: id assign . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "("    shift, and go to state 8
    "-"    shift, and go to state 9

    E  go to state 10


state 4

    0 $accept: S $end .

    $default  accept


state 5

    5 E: id .

    $default  reduce using rule 5 (E)


state 6

    7 E: FLOAT .

    $default  reduce using rule 7 (E)


state 7

    6 E: INT .

    $default  reduce using rule 6 (E)


state 8

    3 E: "(" . E ")"

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "("    shift, and go to state 8
    "-"    shift, and go to state 9

    E  go to state 11


state 9

    4 E: "-" . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "("    shift, and go to state 8
    "-"    shift, and go to state 9

    E  go to state 12


state 10

    1 S: id assign E .
    2 E: E . arith E

    arith  shift, and go to state 13

    $default  reduce using rule 1 (S)


state 11

    2 E: E . arith E
    3  | "(" E . ")"

    arith  shift, and go to state 13
    ")"    shift, and go to state 14


state 12

    2 E: E . arith E
    4  | "-" E .

    arith  shift, and go to state 13

    arith     [reduce using rule 4 (E)]
    $default  reduce using rule 4 (E)


state 13

    2 E: E arith . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "("    shift, and go to state 8
    "-"    shift, and go to state 9

    E  go to state 15


state 14

    3 E: "(" E ")" .

    $default  reduce using rule 3 (E)


state 15

    2 E: E . arith E
    2  | E arith E .

    arith  shift, and go to state 13

    arith     [reduce using rule 2 (E)]
    $default  reduce using rule 2 (E)
