Terminals unused in grammar

   ID
   LITERAL
   membership
   identity
   bitwise
   FOR
   DELIMITER
   TAB
   '+'
   '-'
   '*'
   '/'
   '%'


State 6 conflicts: 1 shift/reduce
State 7 conflicts: 1 shift/reduce
State 24 conflicts: 2 shift/reduce, 4 reduce/reduce
State 29 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 41 conflicts: 1 shift/reduce, 4 reduce/reduce
State 47 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 3 shift/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 60 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce


Grammar

    0 $accept: P $end

    1 P: S

    2 S: if_statement else_elif
    3  | while_statement else_statement
    4  | id assign E
    5  | S NL S
    6  | /* empty */

    7 if_statement: IF B COLON NL indent_statement

    8 else_elif: elif_statement else_statement

    9 else_statement: ELSE COLON NL indent_statement
   10               | /* empty */

   11 elif_statement: ELIF B COLON NL indent_statement
   12               | elif_statement elif_statement
   13               | /* empty */

   14 while_statement: WHILE B COLON NL indent_statement

   15 indent_statement: SPACE S
   16                 | indent_statement NL indent_statement
   17                 | /* empty */

   18 B: B OR B
   19  | B AND B
   20  | NOT B
   21  | E
   22  | TRUE
   23  | FALSE

   24 E: E arith E
   25  | E "-" E
   26  | E relop E
   27  | "(" E ")"
   28  | "-" E
   29  | id
   30  | INT
   31  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
id (258) 4 29
ID (259)
LITERAL (260)
FLOAT (261) 31
INT (262) 30
relop (263) 26
arith (264) 24
assign (265) 4
AND (266) 19
OR (267) 18
NOT (268) 20
membership (269)
identity (270)
bitwise (271)
IF (272) 7
ELSE (273) 9
ELIF (274) 11
WHILE (275) 14
FOR (276)
TRUE (277) 22
FALSE (278) 23
DELIMITER (279)
COLON (280) 7 9 11 14
TAB (281)
NL (282) 5 7 9 11 14 16
SPACE (283) 15
UMINUS (284)
"-" (285) 25 28
"(" (286) 27
")" (287) 27


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
P (39)
    on left: 1, on right: 0
S (40)
    on left: 2 3 4 5 6, on right: 1 5 15
if_statement (41)
    on left: 7, on right: 2
else_elif (42)
    on left: 8, on right: 2
else_statement (43)
    on left: 9 10, on right: 3 8
elif_statement (44)
    on left: 11 12 13, on right: 8 12
while_statement (45)
    on left: 14, on right: 3
indent_statement (46)
    on left: 15 16 17, on right: 7 9 11 14 16
B (47)
    on left: 18 19 20 21 22 23, on right: 7 11 14 18 19 20
E (48)
    on left: 24 25 26 27 28 29 30 31, on right: 4 21 24 25 26 27 28


state 0

    0 $accept: . P $end

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 6 (S)

    P                go to state 4
    S                go to state 5
    if_statement     go to state 6
    while_statement  go to state 7


state 1

    4 S: id . assign E

    assign  shift, and go to state 8


state 2

    7 if_statement: IF . B COLON NL indent_statement

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    NOT    shift, and go to state 12
    TRUE   shift, and go to state 13
    FALSE  shift, and go to state 14
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    B  go to state 17
    E  go to state 18


state 3

   14 while_statement: WHILE . B COLON NL indent_statement

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    NOT    shift, and go to state 12
    TRUE   shift, and go to state 13
    FALSE  shift, and go to state 14
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    B  go to state 19
    E  go to state 18


state 4

    0 $accept: P . $end

    $end  shift, and go to state 20


state 5

    1 P: S .
    5 S: S . NL S

    NL  shift, and go to state 21

    $default  reduce using rule 1 (P)


state 6

    2 S: if_statement . else_elif

    ELIF  shift, and go to state 22

    ELIF      [reduce using rule 13 (elif_statement)]
    $default  reduce using rule 13 (elif_statement)

    else_elif       go to state 23
    elif_statement  go to state 24


state 7

    3 S: while_statement . else_statement

    ELSE  shift, and go to state 25

    ELSE      [reduce using rule 10 (else_statement)]
    $default  reduce using rule 10 (else_statement)

    else_statement  go to state 26


state 8

    4 S: id assign . E

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    E  go to state 27


state 9

   29 E: id .

    $default  reduce using rule 29 (E)


state 10

   31 E: FLOAT .

    $default  reduce using rule 31 (E)


state 11

   30 E: INT .

    $default  reduce using rule 30 (E)


state 12

   20 B: NOT . B

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    NOT    shift, and go to state 12
    TRUE   shift, and go to state 13
    FALSE  shift, and go to state 14
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    B  go to state 28
    E  go to state 18


state 13

   22 B: TRUE .

    $default  reduce using rule 22 (B)


state 14

   23 B: FALSE .

    $default  reduce using rule 23 (B)


state 15

   28 E: "-" . E

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    E  go to state 29


state 16

   27 E: "(" . E ")"

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    E  go to state 30


state 17

    7 if_statement: IF B . COLON NL indent_statement
   18 B: B . OR B
   19  | B . AND B

    AND    shift, and go to state 31
    OR     shift, and go to state 32
    COLON  shift, and go to state 33


state 18

   21 B: E .
   24 E: E . arith E
   25  | E . "-" E
   26  | E . relop E

    relop  shift, and go to state 34
    arith  shift, and go to state 35
    "-"    shift, and go to state 36

    $default  reduce using rule 21 (B)


state 19

   14 while_statement: WHILE B . COLON NL indent_statement
   18 B: B . OR B
   19  | B . AND B

    AND    shift, and go to state 31
    OR     shift, and go to state 32
    COLON  shift, and go to state 37


state 20

    0 $accept: P $end .

    $default  accept


state 21

    5 S: S NL . S

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 6 (S)

    S                go to state 38
    if_statement     go to state 6
    while_statement  go to state 7


state 22

   11 elif_statement: ELIF . B COLON NL indent_statement

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    NOT    shift, and go to state 12
    TRUE   shift, and go to state 13
    FALSE  shift, and go to state 14
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    B  go to state 39
    E  go to state 18


state 23

    2 S: if_statement else_elif .

    $default  reduce using rule 2 (S)


state 24

    8 else_elif: elif_statement . else_statement
   12 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 25
    ELIF  shift, and go to state 22

    $end      reduce using rule 10 (else_statement)
    $end      [reduce using rule 13 (elif_statement)]
    ELSE      [reduce using rule 10 (else_statement)]
    ELSE      [reduce using rule 13 (elif_statement)]
    ELIF      [reduce using rule 10 (else_statement)]
    ELIF      [reduce using rule 13 (elif_statement)]
    NL        reduce using rule 10 (else_statement)
    NL        [reduce using rule 13 (elif_statement)]
    $default  reduce using rule 10 (else_statement)

    else_statement  go to state 40
    elif_statement  go to state 41


state 25

    9 else_statement: ELSE . COLON NL indent_statement

    COLON  shift, and go to state 42


state 26

    3 S: while_statement else_statement .

    $default  reduce using rule 3 (S)


state 27

    4 S: id assign E .
   24 E: E . arith E
   25  | E . "-" E
   26  | E . relop E

    relop  shift, and go to state 34
    arith  shift, and go to state 35
    "-"    shift, and go to state 36

    $default  reduce using rule 4 (S)


state 28

   18 B: B . OR B
   19  | B . AND B
   20  | NOT B .

    $default  reduce using rule 20 (B)


state 29

   24 E: E . arith E
   25  | E . "-" E
   26  | E . relop E
   28  | "-" E .

    "-"  shift, and go to state 36

    "-"       [reduce using rule 28 (E)]
    $default  reduce using rule 28 (E)


state 30

   24 E: E . arith E
   25  | E . "-" E
   26  | E . relop E
   27  | "(" E . ")"

    relop  shift, and go to state 34
    arith  shift, and go to state 35
    "-"    shift, and go to state 36
    ")"    shift, and go to state 43


state 31

   19 B: B AND . B

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    NOT    shift, and go to state 12
    TRUE   shift, and go to state 13
    FALSE  shift, and go to state 14
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    B  go to state 44
    E  go to state 18


state 32

   18 B: B OR . B

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    NOT    shift, and go to state 12
    TRUE   shift, and go to state 13
    FALSE  shift, and go to state 14
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    B  go to state 45
    E  go to state 18


state 33

    7 if_statement: IF B COLON . NL indent_statement

    NL  shift, and go to state 46


state 34

   26 E: E relop . E

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    E  go to state 47


state 35

   24 E: E arith . E

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    E  go to state 48


state 36

   25 E: E "-" . E

    id     shift, and go to state 9
    FLOAT  shift, and go to state 10
    INT    shift, and go to state 11
    "-"    shift, and go to state 15
    "("    shift, and go to state 16

    E  go to state 49


state 37

   14 while_statement: WHILE B COLON . NL indent_statement

    NL  shift, and go to state 50


state 38

    5 S: S . NL S
    5  | S NL S .

    NL  shift, and go to state 21

    NL        [reduce using rule 5 (S)]
    $default  reduce using rule 5 (S)


state 39

   11 elif_statement: ELIF B . COLON NL indent_statement
   18 B: B . OR B
   19  | B . AND B

    AND    shift, and go to state 31
    OR     shift, and go to state 32
    COLON  shift, and go to state 51


state 40

    8 else_elif: elif_statement else_statement .

    $default  reduce using rule 8 (else_elif)


state 41

   12 elif_statement: elif_statement . elif_statement
   12               | elif_statement elif_statement .

    ELIF  shift, and go to state 22

    $end      reduce using rule 12 (elif_statement)
    $end      [reduce using rule 13 (elif_statement)]
    ELSE      reduce using rule 12 (elif_statement)
    ELSE      [reduce using rule 13 (elif_statement)]
    ELIF      [reduce using rule 12 (elif_statement)]
    ELIF      [reduce using rule 13 (elif_statement)]
    NL        reduce using rule 12 (elif_statement)
    NL        [reduce using rule 13 (elif_statement)]
    $default  reduce using rule 12 (elif_statement)

    elif_statement  go to state 41


state 42

    9 else_statement: ELSE COLON . NL indent_statement

    NL  shift, and go to state 52


state 43

   27 E: "(" E ")" .

    $default  reduce using rule 27 (E)


state 44

   18 B: B . OR B
   19  | B . AND B
   19  | B AND B .

    $default  reduce using rule 19 (B)


state 45

   18 B: B . OR B
   18  | B OR B .
   19  | B . AND B

    AND  shift, and go to state 31

    $default  reduce using rule 18 (B)


state 46

    7 if_statement: IF B COLON NL . indent_statement

    SPACE  shift, and go to state 53

    $default  reduce using rule 17 (indent_statement)

    indent_statement  go to state 54


state 47

   24 E: E . arith E
   25  | E . "-" E
   26  | E . relop E
   26  | E relop E .

    arith  shift, and go to state 35
    "-"    shift, and go to state 36

    "-"       [reduce using rule 26 (E)]
    $default  reduce using rule 26 (E)


state 48

   24 E: E . arith E
   24  | E arith E .
   25  | E . "-" E
   26  | E . relop E

    "-"  shift, and go to state 36

    "-"       [reduce using rule 24 (E)]
    $default  reduce using rule 24 (E)


state 49

   24 E: E . arith E
   25  | E . "-" E
   25  | E "-" E .
   26  | E . relop E

    relop  shift, and go to state 34
    arith  shift, and go to state 35
    "-"    shift, and go to state 36

    relop     [reduce using rule 25 (E)]
    arith     [reduce using rule 25 (E)]
    "-"       [reduce using rule 25 (E)]
    $default  reduce using rule 25 (E)


state 50

   14 while_statement: WHILE B COLON NL . indent_statement

    SPACE  shift, and go to state 53

    $default  reduce using rule 17 (indent_statement)

    indent_statement  go to state 55


state 51

   11 elif_statement: ELIF B COLON . NL indent_statement

    NL  shift, and go to state 56


state 52

    9 else_statement: ELSE COLON NL . indent_statement

    SPACE  shift, and go to state 53

    $default  reduce using rule 17 (indent_statement)

    indent_statement  go to state 57


state 53

   15 indent_statement: SPACE . S

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 6 (S)

    S                go to state 58
    if_statement     go to state 6
    while_statement  go to state 7


state 54

    7 if_statement: IF B COLON NL indent_statement .
   16 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 59

    NL        [reduce using rule 7 (if_statement)]
    $default  reduce using rule 7 (if_statement)


state 55

   14 while_statement: WHILE B COLON NL indent_statement .
   16 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 59

    NL        [reduce using rule 14 (while_statement)]
    $default  reduce using rule 14 (while_statement)


state 56

   11 elif_statement: ELIF B COLON NL . indent_statement

    SPACE  shift, and go to state 53

    $default  reduce using rule 17 (indent_statement)

    indent_statement  go to state 60


state 57

    9 else_statement: ELSE COLON NL indent_statement .
   16 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 59

    NL        [reduce using rule 9 (else_statement)]
    $default  reduce using rule 9 (else_statement)


state 58

    5 S: S . NL S
   15 indent_statement: SPACE S .

    NL  shift, and go to state 21

    NL        [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 15 (indent_statement)


state 59

   16 indent_statement: indent_statement NL . indent_statement

    SPACE  shift, and go to state 53

    $default  reduce using rule 17 (indent_statement)

    indent_statement  go to state 61


state 60

   11 elif_statement: ELIF B COLON NL indent_statement .
   16 indent_statement: indent_statement . NL indent_statement

    NL  shift, and go to state 59

    NL        [reduce using rule 11 (elif_statement)]
    $default  reduce using rule 11 (elif_statement)


state 61

   16 indent_statement: indent_statement . NL indent_statement
   16                 | indent_statement NL indent_statement .

    NL  shift, and go to state 59

    NL        [reduce using rule 16 (indent_statement)]
    $default  reduce using rule 16 (indent_statement)
