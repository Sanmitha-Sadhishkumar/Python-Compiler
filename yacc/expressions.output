Terminals unused in grammar

   ID
   LITERAL
   logical
   membership
   identity
   bitwise
   '+'
   '-'
   '*'
   '/'
   '%'


State 11 conflicts: 3 shift/reduce
State 17 conflicts: 3 shift/reduce
State 18 conflicts: 3 shift/reduce
State 19 conflicts: 3 shift/reduce


Grammar

    0 $accept: S $end

    1 S: id assign E

    2 E: E arith E
    3  | E "-" E
    4  | E relop E
    5  | "(" E ")"
    6  | "-" E
    7  | id
    8  | INT
    9  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
id (258) 1 7
ID (259)
LITERAL (260)
FLOAT (261) 9
INT (262) 8
relop (263) 4
arith (264) 2
assign (265) 1
logical (266)
membership (267)
identity (268)
bitwise (269)
UMINUS (270)
"-" (271) 3 6
"(" (272) 5
")" (273) 5


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
S (25)
    on left: 1, on right: 0
E (26)
    on left: 2 3 4 5 6 7 8 9, on right: 1 2 3 4 5 6


state 0

    0 $accept: . S $end

    id  shift, and go to state 1

    S  go to state 2


state 1

    1 S: id . assign E

    assign  shift, and go to state 3


state 2

    0 $accept: S . $end

    $end  shift, and go to state 4


state 3

    1 S: id assign . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "-"    shift, and go to state 8
    "("    shift, and go to state 9

    E  go to state 10


state 4

    0 $accept: S $end .

    $default  accept


state 5

    7 E: id .

    $default  reduce using rule 7 (E)


state 6

    9 E: FLOAT .

    $default  reduce using rule 9 (E)


state 7

    8 E: INT .

    $default  reduce using rule 8 (E)


state 8

    6 E: "-" . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "-"    shift, and go to state 8
    "("    shift, and go to state 9

    E  go to state 11


state 9

    5 E: "(" . E ")"

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "-"    shift, and go to state 8
    "("    shift, and go to state 9

    E  go to state 12


state 10

    1 S: id assign E .
    2 E: E . arith E
    3  | E . "-" E
    4  | E . relop E

    relop  shift, and go to state 13
    arith  shift, and go to state 14
    "-"    shift, and go to state 15

    $default  reduce using rule 1 (S)


state 11

    2 E: E . arith E
    3  | E . "-" E
    4  | E . relop E
    6  | "-" E .

    relop  shift, and go to state 13
    arith  shift, and go to state 14
    "-"    shift, and go to state 15

    relop     [reduce using rule 6 (E)]
    arith     [reduce using rule 6 (E)]
    "-"       [reduce using rule 6 (E)]
    $default  reduce using rule 6 (E)


state 12

    2 E: E . arith E
    3  | E . "-" E
    4  | E . relop E
    5  | "(" E . ")"

    relop  shift, and go to state 13
    arith  shift, and go to state 14
    "-"    shift, and go to state 15
    ")"    shift, and go to state 16


state 13

    4 E: E relop . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "-"    shift, and go to state 8
    "("    shift, and go to state 9

    E  go to state 17


state 14

    2 E: E arith . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "-"    shift, and go to state 8
    "("    shift, and go to state 9

    E  go to state 18


state 15

    3 E: E "-" . E

    id     shift, and go to state 5
    FLOAT  shift, and go to state 6
    INT    shift, and go to state 7
    "-"    shift, and go to state 8
    "("    shift, and go to state 9

    E  go to state 19


state 16

    5 E: "(" E ")" .

    $default  reduce using rule 5 (E)


state 17

    2 E: E . arith E
    3  | E . "-" E
    4  | E . relop E
    4  | E relop E .

    relop  shift, and go to state 13
    arith  shift, and go to state 14
    "-"    shift, and go to state 15

    relop     [reduce using rule 4 (E)]
    arith     [reduce using rule 4 (E)]
    "-"       [reduce using rule 4 (E)]
    $default  reduce using rule 4 (E)


state 18

    2 E: E . arith E
    2  | E arith E .
    3  | E . "-" E
    4  | E . relop E

    relop  shift, and go to state 13
    arith  shift, and go to state 14
    "-"    shift, and go to state 15

    relop     [reduce using rule 2 (E)]
    arith     [reduce using rule 2 (E)]
    "-"       [reduce using rule 2 (E)]
    $default  reduce using rule 2 (E)


state 19

    2 E: E . arith E
    3  | E . "-" E
    3  | E "-" E .
    4  | E . relop E

    relop  shift, and go to state 13
    arith  shift, and go to state 14
    "-"    shift, and go to state 15

    relop     [reduce using rule 3 (E)]
    arith     [reduce using rule 3 (E)]
    "-"       [reduce using rule 3 (E)]
    $default  reduce using rule 3 (E)
