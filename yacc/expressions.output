Terminals unused in grammar

   ID
   LITERAL
   membership
   identity
   bitwise
   FOR
   DELIMITER
   TAB
   '+'
   '-'
   '*'
   '/'
   '%'


State 0 conflicts: 1 reduce/reduce
State 7 conflicts: 1 shift/reduce
State 22 conflicts: 1 reduce/reduce
State 25 conflicts: 2 shift/reduce, 2 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce, 4 reduce/reduce
State 47 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 50 conflicts: 3 shift/reduce
State 51 conflicts: 1 shift/reduce
State 53 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce, 4 reduce/reduce
State 56 conflicts: 1 shift/reduce, 3 reduce/reduce
State 57 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce, 2 reduce/reduce
State 60 conflicts: 1 shift/reduce, 5 reduce/reduce
State 61 conflicts: 1 shift/reduce, 4 reduce/reduce


Grammar

    0 $accept: G $end

    1 G: P

    2 P: S
    3  | S NL P
    4  | /* empty */

    5 S: if_statement else_elif
    6  | while_statement else_statement
    7  | id assign E
    8  | /* empty */

    9 if_statement: IF B COLON NL indent_statement

   10 else_elif: elif_statement else_statement

   11 else_statement: ELSE COLON NL indent_statement
   12               | /* empty */

   13 elif_statement: ELIF B COLON NL indent_statement
   14               | elif_statement elif_statement
   15               | /* empty */

   16 while_statement: WHILE B COLON NL indent_statement

   17 indent_statement: SPACE S NL
   18                 | indent_statement indent_statement
   19                 | /* empty */

   20 B: B OR B
   21  | B AND B
   22  | NOT B
   23  | E
   24  | TRUE
   25  | FALSE

   26 E: E arith E
   27  | E "-" E
   28  | E relop E
   29  | "(" E ")"
   30  | "-" E
   31  | id
   32  | INT
   33  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
id (258) 7 31
ID (259)
LITERAL (260)
FLOAT (261) 33
INT (262) 32
relop (263) 28
arith (264) 26
assign (265) 7
AND (266) 21
OR (267) 20
NOT (268) 22
membership (269)
identity (270)
bitwise (271)
IF (272) 9
ELSE (273) 11
ELIF (274) 13
WHILE (275) 16
FOR (276)
TRUE (277) 24
FALSE (278) 25
DELIMITER (279)
COLON (280) 9 11 13 16
TAB (281)
NL (282) 3 9 11 13 16 17
SPACE (283) 17
UMINUS (284)
"-" (285) 27 30
"(" (286) 29
")" (287) 29


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
G (39)
    on left: 1, on right: 0
P (40)
    on left: 2 3 4, on right: 1 3
S (41)
    on left: 5 6 7 8, on right: 2 3 17
if_statement (42)
    on left: 9, on right: 5
else_elif (43)
    on left: 10, on right: 5
else_statement (44)
    on left: 11 12, on right: 6 10
elif_statement (45)
    on left: 13 14 15, on right: 10 14
while_statement (46)
    on left: 16, on right: 6
indent_statement (47)
    on left: 17 18 19, on right: 9 11 13 16 18
B (48)
    on left: 20 21 22 23 24 25, on right: 9 13 16 20 21 22
E (49)
    on left: 26 27 28 29 30 31 32 33, on right: 7 23 26 27 28 29 30


state 0

    0 $accept: . G $end

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $end      reduce using rule 4 (P)
    $end      [reduce using rule 8 (S)]
    NL        reduce using rule 8 (S)
    $default  reduce using rule 4 (P)

    G                go to state 4
    P                go to state 5
    S                go to state 6
    if_statement     go to state 7
    while_statement  go to state 8


state 1

    7 S: id . assign E

    assign  shift, and go to state 9


state 2

    9 if_statement: IF . B COLON NL indent_statement

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 18
    E  go to state 19


state 3

   16 while_statement: WHILE . B COLON NL indent_statement

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 20
    E  go to state 19


state 4

    0 $accept: G . $end

    $end  shift, and go to state 21


state 5

    1 G: P .

    $default  reduce using rule 1 (G)


state 6

    2 P: S .
    3  | S . NL P

    NL  shift, and go to state 22

    $default  reduce using rule 2 (P)


state 7

    5 S: if_statement . else_elif

    ELIF  shift, and go to state 23

    ELIF      [reduce using rule 15 (elif_statement)]
    $default  reduce using rule 15 (elif_statement)

    else_elif       go to state 24
    elif_statement  go to state 25


state 8

    6 S: while_statement . else_statement

    ELSE  shift, and go to state 26

    $default  reduce using rule 12 (else_statement)

    else_statement  go to state 27


state 9

    7 S: id assign . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 28


state 10

   31 E: id .

    $default  reduce using rule 31 (E)


state 11

   33 E: FLOAT .

    $default  reduce using rule 33 (E)


state 12

   32 E: INT .

    $default  reduce using rule 32 (E)


state 13

   22 B: NOT . B

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 29
    E  go to state 19


state 14

   24 B: TRUE .

    $default  reduce using rule 24 (B)


state 15

   25 B: FALSE .

    $default  reduce using rule 25 (B)


state 16

   30 E: "-" . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 30


state 17

   29 E: "(" . E ")"

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 31


state 18

    9 if_statement: IF B . COLON NL indent_statement
   20 B: B . OR B
   21  | B . AND B

    AND    shift, and go to state 32
    OR     shift, and go to state 33
    COLON  shift, and go to state 34


state 19

   23 B: E .
   26 E: E . arith E
   27  | E . "-" E
   28  | E . relop E

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    $default  reduce using rule 23 (B)


state 20

   16 while_statement: WHILE B . COLON NL indent_statement
   20 B: B . OR B
   21  | B . AND B

    AND    shift, and go to state 32
    OR     shift, and go to state 33
    COLON  shift, and go to state 38


state 21

    0 $accept: G $end .

    $default  accept


state 22

    3 P: S NL . P

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $end      reduce using rule 4 (P)
    $end      [reduce using rule 8 (S)]
    NL        reduce using rule 8 (S)
    $default  reduce using rule 4 (P)

    P                go to state 39
    S                go to state 6
    if_statement     go to state 7
    while_statement  go to state 8


state 23

   13 elif_statement: ELIF . B COLON NL indent_statement

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 40
    E  go to state 19


state 24

    5 S: if_statement else_elif .

    $default  reduce using rule 5 (S)


state 25

   10 else_elif: elif_statement . else_statement
   14 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 26
    ELIF  shift, and go to state 23

    $end      reduce using rule 12 (else_statement)
    $end      [reduce using rule 15 (elif_statement)]
    ELSE      [reduce using rule 15 (elif_statement)]
    ELIF      [reduce using rule 15 (elif_statement)]
    NL        reduce using rule 12 (else_statement)
    NL        [reduce using rule 15 (elif_statement)]
    $default  reduce using rule 12 (else_statement)

    else_statement  go to state 41
    elif_statement  go to state 42


state 26

   11 else_statement: ELSE . COLON NL indent_statement

    COLON  shift, and go to state 43


state 27

    6 S: while_statement else_statement .

    $default  reduce using rule 6 (S)


state 28

    7 S: id assign E .
   26 E: E . arith E
   27  | E . "-" E
   28  | E . relop E

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    $default  reduce using rule 7 (S)


state 29

   20 B: B . OR B
   21  | B . AND B
   22  | NOT B .

    $default  reduce using rule 22 (B)


state 30

   26 E: E . arith E
   27  | E . "-" E
   28  | E . relop E
   30  | "-" E .

    "-"  shift, and go to state 37

    "-"       [reduce using rule 30 (E)]
    $default  reduce using rule 30 (E)


state 31

   26 E: E . arith E
   27  | E . "-" E
   28  | E . relop E
   29  | "(" E . ")"

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37
    ")"    shift, and go to state 44


state 32

   21 B: B AND . B

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 45
    E  go to state 19


state 33

   20 B: B OR . B

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    NOT    shift, and go to state 13
    TRUE   shift, and go to state 14
    FALSE  shift, and go to state 15
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    B  go to state 46
    E  go to state 19


state 34

    9 if_statement: IF B COLON . NL indent_statement

    NL  shift, and go to state 47


state 35

   28 E: E relop . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 48


state 36

   26 E: E arith . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 49


state 37

   27 E: E "-" . E

    id     shift, and go to state 10
    FLOAT  shift, and go to state 11
    INT    shift, and go to state 12
    "-"    shift, and go to state 16
    "("    shift, and go to state 17

    E  go to state 50


state 38

   16 while_statement: WHILE B COLON . NL indent_statement

    NL  shift, and go to state 51


state 39

    3 P: S NL P .

    $default  reduce using rule 3 (P)


state 40

   13 elif_statement: ELIF B . COLON NL indent_statement
   20 B: B . OR B
   21  | B . AND B

    AND    shift, and go to state 32
    OR     shift, and go to state 33
    COLON  shift, and go to state 52


state 41

   10 else_elif: elif_statement else_statement .

    $default  reduce using rule 10 (else_elif)


state 42

   14 elif_statement: elif_statement . elif_statement
   14               | elif_statement elif_statement .

    ELIF  shift, and go to state 23

    $end      reduce using rule 14 (elif_statement)
    $end      [reduce using rule 15 (elif_statement)]
    ELSE      reduce using rule 14 (elif_statement)
    ELSE      [reduce using rule 15 (elif_statement)]
    ELIF      [reduce using rule 14 (elif_statement)]
    ELIF      [reduce using rule 15 (elif_statement)]
    NL        reduce using rule 14 (elif_statement)
    NL        [reduce using rule 15 (elif_statement)]
    $default  reduce using rule 14 (elif_statement)

    elif_statement  go to state 42


state 43

   11 else_statement: ELSE COLON . NL indent_statement

    NL  shift, and go to state 53


state 44

   29 E: "(" E ")" .

    $default  reduce using rule 29 (E)


state 45

   20 B: B . OR B
   21  | B . AND B
   21  | B AND B .

    $default  reduce using rule 21 (B)


state 46

   20 B: B . OR B
   20  | B OR B .
   21  | B . AND B

    AND  shift, and go to state 32

    $default  reduce using rule 20 (B)


state 47

    9 if_statement: IF B COLON NL . indent_statement

    SPACE  shift, and go to state 54

    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 19 (indent_statement)

    indent_statement  go to state 55


state 48

   26 E: E . arith E
   27  | E . "-" E
   28  | E . relop E
   28  | E relop E .

    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    "-"       [reduce using rule 28 (E)]
    $default  reduce using rule 28 (E)


state 49

   26 E: E . arith E
   26  | E arith E .
   27  | E . "-" E
   28  | E . relop E

    "-"  shift, and go to state 37

    "-"       [reduce using rule 26 (E)]
    $default  reduce using rule 26 (E)


state 50

   26 E: E . arith E
   27  | E . "-" E
   27  | E "-" E .
   28  | E . relop E

    relop  shift, and go to state 35
    arith  shift, and go to state 36
    "-"    shift, and go to state 37

    relop     [reduce using rule 27 (E)]
    arith     [reduce using rule 27 (E)]
    "-"       [reduce using rule 27 (E)]
    $default  reduce using rule 27 (E)


state 51

   16 while_statement: WHILE B COLON NL . indent_statement

    SPACE  shift, and go to state 54

    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 19 (indent_statement)

    indent_statement  go to state 56


state 52

   13 elif_statement: ELIF B COLON . NL indent_statement

    NL  shift, and go to state 57


state 53

   11 else_statement: ELSE COLON NL . indent_statement

    SPACE  shift, and go to state 54

    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 19 (indent_statement)

    indent_statement  go to state 58


state 54

   17 indent_statement: SPACE . S NL

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 8 (S)

    S                go to state 59
    if_statement     go to state 7
    while_statement  go to state 8


state 55

    9 if_statement: IF B COLON NL indent_statement .
   18 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 54

    $end      reduce using rule 9 (if_statement)
    $end      [reduce using rule 19 (indent_statement)]
    ELSE      reduce using rule 9 (if_statement)
    ELSE      [reduce using rule 19 (indent_statement)]
    ELIF      reduce using rule 9 (if_statement)
    ELIF      [reduce using rule 19 (indent_statement)]
    NL        reduce using rule 9 (if_statement)
    NL        [reduce using rule 19 (indent_statement)]
    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 9 (if_statement)

    indent_statement  go to state 60


state 56

   16 while_statement: WHILE B COLON NL indent_statement .
   18 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 54

    $end      reduce using rule 16 (while_statement)
    $end      [reduce using rule 19 (indent_statement)]
    ELSE      reduce using rule 16 (while_statement)
    ELSE      [reduce using rule 19 (indent_statement)]
    NL        reduce using rule 16 (while_statement)
    NL        [reduce using rule 19 (indent_statement)]
    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 16 (while_statement)

    indent_statement  go to state 60


state 57

   13 elif_statement: ELIF B COLON NL . indent_statement

    SPACE  shift, and go to state 54

    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 19 (indent_statement)

    indent_statement  go to state 61


state 58

   11 else_statement: ELSE COLON NL indent_statement .
   18 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 54

    $end      reduce using rule 11 (else_statement)
    $end      [reduce using rule 19 (indent_statement)]
    NL        reduce using rule 11 (else_statement)
    NL        [reduce using rule 19 (indent_statement)]
    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 11 (else_statement)

    indent_statement  go to state 60


state 59

   17 indent_statement: SPACE S . NL

    NL  shift, and go to state 62


state 60

   18 indent_statement: indent_statement . indent_statement
   18                 | indent_statement indent_statement .

    SPACE  shift, and go to state 54

    $end      reduce using rule 18 (indent_statement)
    $end      [reduce using rule 19 (indent_statement)]
    ELSE      reduce using rule 18 (indent_statement)
    ELSE      [reduce using rule 19 (indent_statement)]
    ELIF      reduce using rule 18 (indent_statement)
    ELIF      [reduce using rule 19 (indent_statement)]
    NL        reduce using rule 18 (indent_statement)
    NL        [reduce using rule 19 (indent_statement)]
    SPACE     [reduce using rule 18 (indent_statement)]
    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 18 (indent_statement)

    indent_statement  go to state 60


state 61

   13 elif_statement: ELIF B COLON NL indent_statement .
   18 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 54

    $end      reduce using rule 13 (elif_statement)
    $end      [reduce using rule 19 (indent_statement)]
    ELSE      reduce using rule 13 (elif_statement)
    ELSE      [reduce using rule 19 (indent_statement)]
    ELIF      reduce using rule 13 (elif_statement)
    ELIF      [reduce using rule 19 (indent_statement)]
    NL        reduce using rule 13 (elif_statement)
    NL        [reduce using rule 19 (indent_statement)]
    SPACE     [reduce using rule 19 (indent_statement)]
    $default  reduce using rule 13 (elif_statement)

    indent_statement  go to state 60


state 62

   17 indent_statement: SPACE S NL .

    $default  reduce using rule 17 (indent_statement)
