Terminals unused in grammar

   ID
   LITERAL
   membership
   identity
   bitwise
   FOR
   DELIMITER
   TAB
   '+'
   '-'
   '*'
   '/'
   '%'


State 5 conflicts: 1 shift/reduce, 2 reduce/reduce
State 22 conflicts: 2 shift/reduce, 2 reduce/reduce
State 27 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce, 4 reduce/reduce
State 43 conflicts: 1 shift/reduce
State 44 conflicts: 1 shift/reduce
State 45 conflicts: 1 shift/reduce
State 46 conflicts: 3 shift/reduce
State 47 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 51 conflicts: 1 shift/reduce, 4 reduce/reduce
State 52 conflicts: 1 shift/reduce, 3 reduce/reduce
State 53 conflicts: 1 shift/reduce
State 54 conflicts: 1 shift/reduce, 2 reduce/reduce
State 56 conflicts: 1 shift/reduce, 5 reduce/reduce
State 57 conflicts: 1 shift/reduce, 4 reduce/reduce


Grammar

    0 $accept: S $end

    1 S: if_statement else_elif
    2  | while_statement else_statement
    3  | /* empty */

    4 if_statement: IF B COLON NL indent_statement

    5 else_elif: elif_statement else_statement
    6          | /* empty */

    7 else_statement: ELSE COLON NL indent_statement
    8               | /* empty */

    9 elif_statement: ELIF B COLON NL indent_statement
   10               | elif_statement elif_statement
   11               | /* empty */

   12 while_statement: WHILE B COLON NL indent_statement

   13 indent_statement: SPACE S NL
   14                 | indent_statement indent_statement
   15                 | /* empty */

   16 B: B OR B
   17  | B AND B
   18  | NOT B
   19  | E
   20  | TRUE
   21  | FALSE

   22 S: id assign E

   23 E: E arith E
   24  | E "-" E
   25  | E relop E
   26  | "(" E ")"
   27  | "-" E
   28  | id
   29  | INT
   30  | FLOAT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
id (258) 22 28
ID (259)
LITERAL (260)
FLOAT (261) 30
INT (262) 29
relop (263) 25
arith (264) 23
assign (265) 22
AND (266) 17
OR (267) 16
NOT (268) 18
membership (269)
identity (270)
bitwise (271)
IF (272) 4
ELSE (273) 7
ELIF (274) 9
WHILE (275) 12
FOR (276)
TRUE (277) 20
FALSE (278) 21
DELIMITER (279)
COLON (280) 4 7 9 12
TAB (281)
NL (282) 4 7 9 12 13
SPACE (283) 13
UMINUS (284)
"-" (285) 24 27
"(" (286) 26
")" (287) 26


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
S (39)
    on left: 1 2 3 22, on right: 0 13
if_statement (40)
    on left: 4, on right: 1
else_elif (41)
    on left: 5 6, on right: 1
else_statement (42)
    on left: 7 8, on right: 2 5
elif_statement (43)
    on left: 9 10 11, on right: 5 10
while_statement (44)
    on left: 12, on right: 2
indent_statement (45)
    on left: 13 14 15, on right: 4 7 9 12 14
B (46)
    on left: 16 17 18 19 20 21, on right: 4 9 12 16 17 18
E (47)
    on left: 23 24 25 26 27 28 29 30, on right: 19 22 23 24 25 26 27


state 0

    0 $accept: . S $end

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 3 (S)

    S                go to state 4
    if_statement     go to state 5
    while_statement  go to state 6


state 1

   22 S: id . assign E

    assign  shift, and go to state 7


state 2

    4 if_statement: IF . B COLON NL indent_statement

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    NOT    shift, and go to state 11
    TRUE   shift, and go to state 12
    FALSE  shift, and go to state 13
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    B  go to state 16
    E  go to state 17


state 3

   12 while_statement: WHILE . B COLON NL indent_statement

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    NOT    shift, and go to state 11
    TRUE   shift, and go to state 12
    FALSE  shift, and go to state 13
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    B  go to state 18
    E  go to state 17


state 4

    0 $accept: S . $end

    $end  shift, and go to state 19


state 5

    1 S: if_statement . else_elif

    ELIF  shift, and go to state 20

    $end      reduce using rule 6 (else_elif)
    $end      [reduce using rule 11 (elif_statement)]
    ELSE      reduce using rule 11 (elif_statement)
    ELIF      [reduce using rule 11 (elif_statement)]
    NL        reduce using rule 6 (else_elif)
    NL        [reduce using rule 11 (elif_statement)]
    $default  reduce using rule 6 (else_elif)

    else_elif       go to state 21
    elif_statement  go to state 22


state 6

    2 S: while_statement . else_statement

    ELSE  shift, and go to state 23

    $default  reduce using rule 8 (else_statement)

    else_statement  go to state 24


state 7

   22 S: id assign . E

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    E  go to state 25


state 8

   28 E: id .

    $default  reduce using rule 28 (E)


state 9

   30 E: FLOAT .

    $default  reduce using rule 30 (E)


state 10

   29 E: INT .

    $default  reduce using rule 29 (E)


state 11

   18 B: NOT . B

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    NOT    shift, and go to state 11
    TRUE   shift, and go to state 12
    FALSE  shift, and go to state 13
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    B  go to state 26
    E  go to state 17


state 12

   20 B: TRUE .

    $default  reduce using rule 20 (B)


state 13

   21 B: FALSE .

    $default  reduce using rule 21 (B)


state 14

   27 E: "-" . E

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    E  go to state 27


state 15

   26 E: "(" . E ")"

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    E  go to state 28


state 16

    4 if_statement: IF B . COLON NL indent_statement
   16 B: B . OR B
   17  | B . AND B

    AND    shift, and go to state 29
    OR     shift, and go to state 30
    COLON  shift, and go to state 31


state 17

   19 B: E .
   23 E: E . arith E
   24  | E . "-" E
   25  | E . relop E

    relop  shift, and go to state 32
    arith  shift, and go to state 33
    "-"    shift, and go to state 34

    $default  reduce using rule 19 (B)


state 18

   12 while_statement: WHILE B . COLON NL indent_statement
   16 B: B . OR B
   17  | B . AND B

    AND    shift, and go to state 29
    OR     shift, and go to state 30
    COLON  shift, and go to state 35


state 19

    0 $accept: S $end .

    $default  accept


state 20

    9 elif_statement: ELIF . B COLON NL indent_statement

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    NOT    shift, and go to state 11
    TRUE   shift, and go to state 12
    FALSE  shift, and go to state 13
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    B  go to state 36
    E  go to state 17


state 21

    1 S: if_statement else_elif .

    $default  reduce using rule 1 (S)


state 22

    5 else_elif: elif_statement . else_statement
   10 elif_statement: elif_statement . elif_statement

    ELSE  shift, and go to state 23
    ELIF  shift, and go to state 20

    $end      reduce using rule 8 (else_statement)
    $end      [reduce using rule 11 (elif_statement)]
    ELSE      [reduce using rule 11 (elif_statement)]
    ELIF      [reduce using rule 11 (elif_statement)]
    NL        reduce using rule 8 (else_statement)
    NL        [reduce using rule 11 (elif_statement)]
    $default  reduce using rule 8 (else_statement)

    else_statement  go to state 37
    elif_statement  go to state 38


state 23

    7 else_statement: ELSE . COLON NL indent_statement

    COLON  shift, and go to state 39


state 24

    2 S: while_statement else_statement .

    $default  reduce using rule 2 (S)


state 25

   22 S: id assign E .
   23 E: E . arith E
   24  | E . "-" E
   25  | E . relop E

    relop  shift, and go to state 32
    arith  shift, and go to state 33
    "-"    shift, and go to state 34

    $default  reduce using rule 22 (S)


state 26

   16 B: B . OR B
   17  | B . AND B
   18  | NOT B .

    $default  reduce using rule 18 (B)


state 27

   23 E: E . arith E
   24  | E . "-" E
   25  | E . relop E
   27  | "-" E .

    "-"  shift, and go to state 34

    "-"       [reduce using rule 27 (E)]
    $default  reduce using rule 27 (E)


state 28

   23 E: E . arith E
   24  | E . "-" E
   25  | E . relop E
   26  | "(" E . ")"

    relop  shift, and go to state 32
    arith  shift, and go to state 33
    "-"    shift, and go to state 34
    ")"    shift, and go to state 40


state 29

   17 B: B AND . B

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    NOT    shift, and go to state 11
    TRUE   shift, and go to state 12
    FALSE  shift, and go to state 13
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    B  go to state 41
    E  go to state 17


state 30

   16 B: B OR . B

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    NOT    shift, and go to state 11
    TRUE   shift, and go to state 12
    FALSE  shift, and go to state 13
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    B  go to state 42
    E  go to state 17


state 31

    4 if_statement: IF B COLON . NL indent_statement

    NL  shift, and go to state 43


state 32

   25 E: E relop . E

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    E  go to state 44


state 33

   23 E: E arith . E

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    E  go to state 45


state 34

   24 E: E "-" . E

    id     shift, and go to state 8
    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    "-"    shift, and go to state 14
    "("    shift, and go to state 15

    E  go to state 46


state 35

   12 while_statement: WHILE B COLON . NL indent_statement

    NL  shift, and go to state 47


state 36

    9 elif_statement: ELIF B . COLON NL indent_statement
   16 B: B . OR B
   17  | B . AND B

    AND    shift, and go to state 29
    OR     shift, and go to state 30
    COLON  shift, and go to state 48


state 37

    5 else_elif: elif_statement else_statement .

    $default  reduce using rule 5 (else_elif)


state 38

   10 elif_statement: elif_statement . elif_statement
   10               | elif_statement elif_statement .

    ELIF  shift, and go to state 20

    $end      reduce using rule 10 (elif_statement)
    $end      [reduce using rule 11 (elif_statement)]
    ELSE      reduce using rule 10 (elif_statement)
    ELSE      [reduce using rule 11 (elif_statement)]
    ELIF      [reduce using rule 10 (elif_statement)]
    ELIF      [reduce using rule 11 (elif_statement)]
    NL        reduce using rule 10 (elif_statement)
    NL        [reduce using rule 11 (elif_statement)]
    $default  reduce using rule 10 (elif_statement)

    elif_statement  go to state 38


state 39

    7 else_statement: ELSE COLON . NL indent_statement

    NL  shift, and go to state 49


state 40

   26 E: "(" E ")" .

    $default  reduce using rule 26 (E)


state 41

   16 B: B . OR B
   17  | B . AND B
   17  | B AND B .

    $default  reduce using rule 17 (B)


state 42

   16 B: B . OR B
   16  | B OR B .
   17  | B . AND B

    AND  shift, and go to state 29

    $default  reduce using rule 16 (B)


state 43

    4 if_statement: IF B COLON NL . indent_statement

    SPACE  shift, and go to state 50

    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 15 (indent_statement)

    indent_statement  go to state 51


state 44

   23 E: E . arith E
   24  | E . "-" E
   25  | E . relop E
   25  | E relop E .

    arith  shift, and go to state 33
    "-"    shift, and go to state 34

    "-"       [reduce using rule 25 (E)]
    $default  reduce using rule 25 (E)


state 45

   23 E: E . arith E
   23  | E arith E .
   24  | E . "-" E
   25  | E . relop E

    "-"  shift, and go to state 34

    "-"       [reduce using rule 23 (E)]
    $default  reduce using rule 23 (E)


state 46

   23 E: E . arith E
   24  | E . "-" E
   24  | E "-" E .
   25  | E . relop E

    relop  shift, and go to state 32
    arith  shift, and go to state 33
    "-"    shift, and go to state 34

    relop     [reduce using rule 24 (E)]
    arith     [reduce using rule 24 (E)]
    "-"       [reduce using rule 24 (E)]
    $default  reduce using rule 24 (E)


state 47

   12 while_statement: WHILE B COLON NL . indent_statement

    SPACE  shift, and go to state 50

    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 15 (indent_statement)

    indent_statement  go to state 52


state 48

    9 elif_statement: ELIF B COLON . NL indent_statement

    NL  shift, and go to state 53


state 49

    7 else_statement: ELSE COLON NL . indent_statement

    SPACE  shift, and go to state 50

    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 15 (indent_statement)

    indent_statement  go to state 54


state 50

   13 indent_statement: SPACE . S NL

    id     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 3 (S)

    S                go to state 55
    if_statement     go to state 5
    while_statement  go to state 6


state 51

    4 if_statement: IF B COLON NL indent_statement .
   14 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 50

    $end      reduce using rule 4 (if_statement)
    $end      [reduce using rule 15 (indent_statement)]
    ELSE      reduce using rule 4 (if_statement)
    ELSE      [reduce using rule 15 (indent_statement)]
    ELIF      reduce using rule 4 (if_statement)
    ELIF      [reduce using rule 15 (indent_statement)]
    NL        reduce using rule 4 (if_statement)
    NL        [reduce using rule 15 (indent_statement)]
    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 4 (if_statement)

    indent_statement  go to state 56


state 52

   12 while_statement: WHILE B COLON NL indent_statement .
   14 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 50

    $end      reduce using rule 12 (while_statement)
    $end      [reduce using rule 15 (indent_statement)]
    ELSE      reduce using rule 12 (while_statement)
    ELSE      [reduce using rule 15 (indent_statement)]
    NL        reduce using rule 12 (while_statement)
    NL        [reduce using rule 15 (indent_statement)]
    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 12 (while_statement)

    indent_statement  go to state 56


state 53

    9 elif_statement: ELIF B COLON NL . indent_statement

    SPACE  shift, and go to state 50

    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 15 (indent_statement)

    indent_statement  go to state 57


state 54

    7 else_statement: ELSE COLON NL indent_statement .
   14 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 50

    $end      reduce using rule 7 (else_statement)
    $end      [reduce using rule 15 (indent_statement)]
    NL        reduce using rule 7 (else_statement)
    NL        [reduce using rule 15 (indent_statement)]
    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 7 (else_statement)

    indent_statement  go to state 56


state 55

   13 indent_statement: SPACE S . NL

    NL  shift, and go to state 58


state 56

   14 indent_statement: indent_statement . indent_statement
   14                 | indent_statement indent_statement .

    SPACE  shift, and go to state 50

    $end      reduce using rule 14 (indent_statement)
    $end      [reduce using rule 15 (indent_statement)]
    ELSE      reduce using rule 14 (indent_statement)
    ELSE      [reduce using rule 15 (indent_statement)]
    ELIF      reduce using rule 14 (indent_statement)
    ELIF      [reduce using rule 15 (indent_statement)]
    NL        reduce using rule 14 (indent_statement)
    NL        [reduce using rule 15 (indent_statement)]
    SPACE     [reduce using rule 14 (indent_statement)]
    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 14 (indent_statement)

    indent_statement  go to state 56


state 57

    9 elif_statement: ELIF B COLON NL indent_statement .
   14 indent_statement: indent_statement . indent_statement

    SPACE  shift, and go to state 50

    $end      reduce using rule 9 (elif_statement)
    $end      [reduce using rule 15 (indent_statement)]
    ELSE      reduce using rule 9 (elif_statement)
    ELSE      [reduce using rule 15 (indent_statement)]
    ELIF      reduce using rule 9 (elif_statement)
    ELIF      [reduce using rule 15 (indent_statement)]
    NL        reduce using rule 9 (elif_statement)
    NL        [reduce using rule 15 (indent_statement)]
    SPACE     [reduce using rule 15 (indent_statement)]
    $default  reduce using rule 9 (elif_statement)

    indent_statement  go to state 56


state 58

   13 indent_statement: SPACE S NL .

    $default  reduce using rule 13 (indent_statement)
